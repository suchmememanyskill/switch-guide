{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#nh-switch-guide","title":"NH Switch Guide","text":"<p>NH Switch Guide is a collaboration from Nintendo Homebrew's Discord community, getting you from stock to Atmosph\u00e8re.</p> <p>For live support with this guide, visit us in #switch-assistance-1 or #switch-assistance-2 over at the NH Discord server.</p> <p>Prepare to set aside a minimum of an hour to follow this guide. This is specifically for you to carefully read and understand each page for safe execution for the safety and longevity of your Switch console. Some required device backups can also take around ten to thirty minutes to create, depending on your Switch model and your microSD speed.</p>"},{"location":"#what-is-custom-firmware","title":"What is Custom Firmware?","text":"<p>Custom FirmWare (\u201cCFW\u201d) is complex software that modifies the function of a device's operating system, also known as a system firmware. Atmosph\u00e8re, for example, patches the Switch OS (named Horizon) on the fly.</p> <p>Custom firmware can be considered a holy grail in terms of device modding, as it allows nearly limitless control and freedoms than you would get with more primitive \"userland\" access. \u00a0</p>"},{"location":"#what-is-homebrew","title":"What is homebrew?","text":"<p>Homebrew refers to unofficial software written by hobbyists for locked down systems, like the Nintendo Switch. Homebrew can include original games, emulators, save-editing tools, and much, much more!</p> <p>On the Switch in particular, you need CFW to run almost all available homebrew. Some first-gen (\"V1\") consoles can run homebrew for free, while all other (\"patched\") consoles require specialized hardware installation beforehand. \u00a0</p>"},{"location":"#what-does-this-guide-install","title":"What does this guide install?","text":"<p>This guide has the end-goal of taking a completely unmodified Switch from stock firmware to a custom firmware named Atmosph\u00e8re.</p> <p>\"fusee-gelee\" is currently the most widespread software entrypoint of launching custom firmware. It utilizes a vulnerability in the bootROM of the first-generation Switch systems, allowing us to boot the console via any payload we choose, instead of only ones that Nvidia and Nintendo authorize.  The result allows full baremetal control over your console, including system storage backups, recovery, custom firmwares, and custom operating systems. \u00a0</p>"},{"location":"#what-can-i-do-with-custom-firmware","title":"What can I do with custom firmware?","text":"<ul> <li>Customize your HOME Menu with user-created themes and splash screens</li> <li>Run \u201cROM hacks\u201d for games that you own</li> <li>Backup, edit, and restore saves for many games</li> <li>Play games for older systems with various emulators, using RetroArch or other standalone emulators</li> <li>Safely update to the latest system version without fear of losing access to homebrew</li> <li>Safely customise your device while retaining full access to Nintendo online services \u00a0</li> </ul>"},{"location":"#what-do-i-need-to-know-before-starting","title":"What do I need to know before starting?","text":"<p>As previously mentioned, this guide will take a minimum of an hour to fully complete. Please responsibly set aside this time before your first run-through.</p> <p>Acknowledge that EVERY time you modify your system, there is always the potential for an UNRECOVERABLE brick. A brick is a damaged device that no longer functions; something that becomes as \"useful as a brick\". On the Switch, they're rare, but still a possibility -- so make sure you read the directions carefully before performing them, and follow them EXACTLY.</p> <p>This guide will work on first-generation (V1) and modchipped Switch consoles in all regions on any firmware version.</p> <p>You will need just one of the following in order to successfully follow this guide:</p> <ul> <li>A PC, and a USB-C cable capable of data transfer to connect them together</li> <li>An Android device, and a USB-C cable capable of data transfer to connect them together<ul> <li>This does not work on every Android phone</li> </ul> </li> <li>A Lightning OTG adapter, a jailbroken iOS device, and a USB cable, all capable of data transfer to connect everything together<ul> <li>This method is not covered by the guide, but you can read more about it at this website</li> </ul> </li> <li>A successfully modchipped Switch</li> </ul> <p>If you choose the emuMMC path introduced later in the guide, you will also need a microSD card that is at least 128 gigabytes. In this path, it'll be important to disable the Automatic Save Data Cloud function beforehand, as well as making sure the Switch is set as the primary console.  If you must use a smaller microSD card, you can choose to use the sysNAND CFW path, after assuming the risks involved.</p> <p>Additionally, on a V1 \"unpatched\" Switch, you will need a way to access the ReCovery Mode (this will be further explained in the \"Entering RCM section\"). While possible with household tools, you may want to shell money out for a \"jig\" that inserts into the Joy-Con rail to reliably enable RCM.</p> <p>Upon completion, you will lose no data, ending up with everything that you started with (games, Nintendo Account, saves, etc will be preserved). Your functionalities will only be enhanced.</p> <p>Keep your device plugged in and charged throughout the entire process to avoid data loss or damage from an unexpected power-off.</p> <p>Custom firmware is not permanently installed and does not change anything on your console simply by running it. It will be entirely unloaded upon rebooting the console if you aren't using a modchip. However, CFW does allow you to make permanent changes at your own will, so be responsible and cautious with the abilities enabled by CFW.</p> <p>It is advised that you read the entire guide from start to finish one or more times before actually running through the guide with your system.</p> <p> </p>"},{"location":"#select-an-option-below-to-continue-the-guide","title":"Select an option below to continue the guide!","text":"<p>Get Started with RCM (free)  Get Started with Modchips (not free!) </p> <p> </p> <p>Note: We are not currently, historically, or will we ever be, associated with Anton Retro, sthetix, Ely M., or other derivative or YouTube/TikTok guide publishers, especially any that claim relation to us.</p> <p>Furthermore, we resent any implication to the contrary.</p> Frequently Asked Questions about this page <ul> <li> <p>Q: What are the differences between \"first-generation\" (\"V1\") consoles and \"patched\" consoles when it comes to running homebrew?          A: Once you boot into Horizon, not much. The primary things to keep in mind is that only V1 consoles support Atmosph\u00e8re's \"Reboot to Payload\" function, but modchips automatically load payloads during reboots on their own.</p> </li> <li> <p>Q: What is Horizon?          A: Horizon is the name of the Switch's operating system. It is sometimes called \"HorizonNX\", because it is actually a derivative version of the Nintendo 3DS's operating system of the same name.</p> </li> <li> <p>Q: Why is it called Atmosph\u00e8re?          A: Atmosph\u00e8re \"runs on top of the Horizon\" operating system. Each layer of Horizon's security is referenced via the atmosphere's different layers. For example, the EL1 \"kernel\" reimplementation is called mesosph\u00e8re, while the EL3 \"TrustZone\" reimplementation is called exosph\u00e8re.  Learn more about ARM Exception Levels here.</p> </li> <li> <p>Q: What exactly is the \"emuMMC path,\" and why is it recommended for the microSD card to be at least 128GB for this path?          A: The purpose of an emuMMC/emuNAND is to give you a safe place to use custom firmware functions without Nintendo catching sight. As it is an offline clone of your internal storage ran entirely from your microSD card, you will need to set allocate up to 64GB on your microSD card for it (depending on the size of your internal storage), plus a duplicate your of digital game data (emuMMC uses a separate Nintendo folder for game installs).</p> </li> <li> <p>Q: Why do I need to set my console as primary before starting this guide?          A: The Switch will otherwise try to connect to Nintendo servers before starting apps, which can lead to unexpected delays and make emuMMCs completely unusable.</p> </li> <li> <p>Q: Can I follow this guide if I have a smaller microSD card, and what are the risks involved in choosing the sysNAND CFW path?          A: Nothing stops you from using CFW on your sysNAND, but it is recommended for first-timers to get familiar with CFW by starting with an emuMMC. Running CFW on sysNAND can risk bricking your console's internal system software, stopping it from turning on even without starting the console via RCM or from your modchip. It also risks bans.</p> </li> <li> <p>Q: Are there any specific restrictions or limitations imposed by Nintendo on consoles running custom firmware and homebrew?          A: Nintendo has shown a distinct tolerance for users using CFW while online. They do not ban for the presence of CFW, they ban for misbehavior - such as piracy or cheating online. Otherwise, you are treated like all other users.</p> </li> <li> <p>Q: Is there any community support or forums recommended for users who may have questions or issues during the process?          A: Of course! As well as the Nintendo Homebrew Discord server, you can also try the r/SwitchHacks subreddit!</p> </li> </ul>"},{"location":"about/","title":"About","text":""},{"location":"about/#about-this-guide","title":"About this guide","text":"<p>This guide was written by community members of the Nintendo Homebrew Discord Server.</p> <p> </p> <p>Credits</p> <ul> <li>SuchMemeManySkill</li> <li>DefenderOfHyrule</li> <li>ha1vorsen</li> <li>Dardel</li> <li>MarigoldZephyrNio</li> <li>Sanras</li> <li>JeffVi</li> <li>eip618</li> <li>Flump</li> <li>oreo639</li> <li>thedax</li> <li>dorkeline</li> <li>ihaveahax</li> <li>PhazonicRidley</li> <li>xGhostBoyx</li> <li>jerbear64</li> <li>Phoenix</li> <li>the Nintendo Homebrew community</li> </ul> <p>Thank you to everyone else that contributed to the guide on GitHub, but special thanks to noirscape.</p> <p>You can find this guide on GitHub, It is licensed under the ISC license.</p> <p>Developer / Tool credits</p> <ul> <li>Atmosphere-NX for Atmosphere.</li> <li>switchbrew for nx-hbloader and nx-hbmenu.</li> <li>nwert and CTCaer for Hekate.</li> <li>WerWolv for EdiZon.</li> <li>J-D-K for JKSV.</li> <li>Flagbrew for Checkpoint.</li> <li>mtheall for FTPD.</li> <li>joel16 for NX-Shell.</li> <li>Cease &amp; DeSwitch for fusee-gelee.</li> <li>MenosGrante for Rekado.</li> <li>eliboa for TegraRcmGUI.</li> <li>vgmoose, pwsincd, rw-r-r_0644 and crc32 for hb-appstore.</li> <li>Essometer for collecting patched Switch serials.</li> <li>Ave for 90DNS.</li> <li>Nexrem (meganukebmp) for the Switch 90DNS Tester.</li> <li>exelix11 for Switch Theme Injector.</li> <li>suchmememanyskill for TegraExplorer</li> </ul> <p></p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#what-firmware-versions-are-currently-hackable","title":"What firmware versions are currently hackable?","text":"<p>Currently two hardware revisions of the Switch exist. Any Switch bought or manufactured before the middle of 2018 has a bootrom bug that allows us to run code regardless of the firmware version on the Switch. When Nintendo updates the system, however, CFW will usually need an update to account for it. This bug cannot be fixed by Nintendo once the console leaves the factory, unless the console is sent in for repairs. This means that all current and future firmwares will be able to launch CFW through this exploit on the old hardware revision.</p> <p>Any console purchased after approximately August 2018 is likely to be patched. This includes the latest units on shelves, referred to as 'red box' or 'Mariko'. Mariko is hardware patched, but may come on a vulnerable firmware. Currently the only way to know if your Switch is hackable is by trying to send the payload in RCM. Even with this exploit fixed, many Switch consoles on 8.0.1 and below will be hackable to some degree in the future (see Should I update my Firmware? for much more detailed information). The serial number on the back of the box can possibly tell you which consoles are patched and which aren't. See here for an up to date list.</p>"},{"location":"faq/#how-do-i-use-the-exploit-how-can-i-boot-into-rcm","title":"How do I use the exploit? How can I boot into RCM?","text":"<p>To launch CFW through the exploit, the Switch needs to be in \"Recovery Mode\"(RCM). The easiest way to enter RCM is by grounding pin 10 in the right joycon rail and holding VOL+ on boot. Several methods and designs to do this exist, see our guide for more information. Once the Switch is in RCM it needs to be connected to either a computer, phone or dongle to send the exploit and the payload.</p> <p>This procedure needs to happen every time the Switch boots from a completely \"off\" state, otherwise the Switch will boot into the stock firmware.</p>"},{"location":"faq/#what-makes-a-good-jig-good-can-i-use-a-paperclip","title":"What makes a good jig good? Can I use a paperclip?","text":"<p>Most people prefer to use 3d-printed jigs to enter RCM. These jigs are made in a way that they slide into the right joycon rail and have a piece of connected wire that then bridges pin 10 and one of the grounded pins on the Switch. A lot of different designs for these jigs exist, but it is important to understand, that these jigs can damage the Switch if they are made in a bad way.</p> <p>Since the wire in the jig is supposed to touch the pads inside the Switch's joycon rail, it is important to use wire that is thin, not rigid and bent/not pointy. Paperclips make for potentially dangerous jigs, as they are made out of a hard material, are rigid and pointy and can easily scratch off the pads inside the Switch. A good jig uses 32Gauge(0.2mm diameter) wire and is bent in a way that the end of the wire does not scratch the pads. You can download and 3d-print your own jig and use the pictures on this website to guide you on how to bend the wire correctly. Premade jigs can be found on online marketplaces for cheap.</p>"},{"location":"faq/#is-there-an-easier-way-to-enter-rcm","title":"Is there an easier way to enter RCM?","text":"<p>To enter RCM more comfortably a solution called \"AutoRCM\" exists. Once set up, this method will always boot the Switch into RCM, even without a jig or holding any buttons. This works by \"bricking\" the Switch in a controlled manner. The Switch detects that something is wrong and boots into RCM to get repaired. The big downside of this method is, that it is impossible to boot the Switch without a computer, phone or dongle, as it will never boot into stock firmware by itself, and that it requires an SD card with the proper CFW files on it at all times. In addition, if the battery of the Switch is completely drained, the Switch will need to charge to at least 10% in Hekate before launching Atmosphere, otherwise the Switch will refuse to boot due to the low battery. Charging in RCM is not recommended as this is very slow. AutoRCM can be reversed, but it is advised to keep a working NAND and BOOT0/1 backup before using it.</p> <p>Many Android-phones are able to send the exploit to the Switch, making them a perfect portable way to launch CFW. Different designs for portable dongles exist, ranging from Raspberry Pi Zero and Arduino projects to internal dongles, that work completely autonomous. The latter should only be done by advanced users, as it requires soldering onto the Switch mainboard itself.</p>"},{"location":"faq/#should-i-update-my-firmware","title":"Should I update my Firmware?","text":"<p>If your Switch is one of the new hardware revisions that patched the exploit in RCM and you are on firmware 7.0.1 or lower, you should not update if you want to have CFW in the forseeable future.</p> <p>If your Switch is one of the older hardware revisions and you don't mind having to use jigs/hardmods/AutoRCM and sending the exploit via computer, phone or dongle everytime you want to launch into CFW then it is completely safe to update. If you want the chance to maybe, one day, not have to use a external device, then it is recommended to stay on a FW as low as possible. Beware that this means that you potentially need to wait for a very long time (months to years) for this to happen, if ever. Private exploits to launch CFW over the Browser are known to exist for firmwares up to 7.0.1.</p> <p>Downgrading on the Switch is possible, but it requires using AutoRCM and a custom bootloader payload to bypass the Switch's several hardware anti-downgrade mechanisms. This will not work on an unpatched system, and is practically useless for most users. On every boot the Switch firmware checks how many e-fuses have been burned and how many e-fuses the Switch expects to be burned. Major updates to the Switch, or updates in which a large vulnerability has been patched, irreversibly burn one of the Switch's 64 \"e-fuses\". If the Switch ever detects that more e-fuses have been burned than expected (meaning a downgrade happened), it will refuse to boot. Replacing e-fuses is not an option. You can find more information about fuses here</p> <p>Atmosph\u00e8reis maintained to support the latest firmware updates on unpatched units. The situation for patched and new units is as follows:</p> <pre><code>- **\"Old\"** *Patched Switch (HAC-001): Do NOT update past 7.0.1. Units on 7.0.1 and below will eventually get CFW. Patched units that have upgraded to 8.0.0 or 8.0.1 will likely get homebrew.*\n\n- **\"New\"** *Switch (HAC-001-01): Do NOT update past 8.0.1. Units on 8.0.1 and below will likely get homebrew. Units on 8.1.0 and higher are not expected to be hacked and can be updated.*\n\n- **Switch Lite** *(HDH-001): Do NOT update past 8.0.1. Units on 8.0.1 and below will likely get homebrew. Units on 8.1.0 and higher are not expected to be hacked and can be updated.*\n\nA method to update without burning e-fuses exists, but, like downgrading, it forces you to use AutoRCM and sending the exploit via USB every time, as booting into the stock firmware even once would instantly burn the e-fuse. Note that other anti-downgrade mechanisms exist, making it for example impossible to boot game carts on a firmware below 4.1/9.0.0 if the Switch has ever launched a game on firmware 4.1+/9.0.0+. This can only be worked around by completely disabling the game cart slot while on 4.1/9.0.0 or greater, which is similarly impractical for most users.\n</code></pre>"},{"location":"faq/#is-it-safe-to-use-homebrew-will-i-get-banned","title":"Is it safe to use homebrew? Will I get banned?","text":"<p>The Switch comes with a lot of telemetry, and has been called a \"telemetry monster\" by several prominent developers. As long as the Switch is connected to the internet, Nintendo gets a report about a lot of different actions and states and has the option to log or act on them. Even if the Switch is offline and connects to the internet at a later point, Nintendo still recieves information about what happened while the Switch was disconnected.</p> <p>To disable some of this telemetry, it is advised to disable the sending of error reports in the System Settings of the Switch. Additionally if you live in the EU you can set the \"do not share\" option on Nintendo's website to prevent your Switch from sending a lot of telemetry, although the effectiveness of this is questionable.</p> <p>Nintendo still receives a lot of information, even with those options disabled. We also cannot know if Nintendo decides to look for something in the logs and ban people in retrospect. They have also shown to expand their telemetry options with every other firmware update.</p> <p>Currently all bans have been for very obvious and intrusive actions, specifically:</p> <ul> <li>Developers using their unique Switch data to poke and reverse-engineer Nintendos Server responses</li> <li>People pirating games and using them online</li> <li>People changing their profile pictures to custom pictures</li> <li>People using savegame editors to unlock content that is not available yet and using it online (Splatoon 2)</li> <li>People cheating online in general (Modifying Cart stats in MK8)</li> <li>People installing homebrew NSP files, which Nintendo can pick up on with their telemetry</li> </ul> <p>Atmosph\u00e8re stops some, but not all of Nintendo's telemetry, and prevents crash reports from being sent. This means Nintendo can't tell if anything, including homebrew or modded games crashed, and Atmosph\u00e8re dumps the crash log to the microSD card to help homebrew developers. However, Nintendo still receives information about what is being played, and general system report information.</p> <p>Atmosph\u00e8re is not a silver bullet, and this does not mean that Nintendo won't decide to ban people for harmless homebrew in the future. If you are scared to get banned then don't use homebrew for now. Atmosph\u00e8re now supports emuMMC (emuNAND): a copy of Switch system software, run entirely from the microSD card instead.     This erases ban risks due to the fact that emuMMC is run in a quarantined, offline state, not touching the internal memory. You are still able to boot into original firmware to play online.</p> <pre><code>For patched units reliant on deja-vu, sysNAND will always have to be on a firmware below 4.1. For Switch versions from 5.0 to 7.0.1 deja-vu isn't quite out yet but will come eventually. (Also please note that firmwares 8.0.0+ will never work with deja-vu) You can use an updated emuMMC dedicated to online/clean play, while your sysNAND is used offline for custom firmware.\n\nWe do not recommend the use of ReiNX or SX OS for many reasons, primary among them that they use lots of assets from Atmosph\u00e8re and offer no real benefit that Atmosph\u00e8re does not offer anyway.\nWe also do not recommend Kosmos, as its large amount of extras on top of regular Atmosph\u00e8re make it difficult to troubleshoot strange issues.\nAll of these alternative CFWs also tend to use non-conventional setups which can cause issues that make it difficult to troubleshoot, which is another reason we prefer using Atmosphere.\nAdditionally, it is advised to use 90DNS which blocks connections to any Nintendo servers. If you use an emuNAND for CFW and keep your sysNAND clean for playing online, you should use 90DNS on your emuNAND.\n*Note: Keeping your emuNAND \"dirty\" and your sysNAND \"clean\" pertains primarily to those using the RCM exploit. Users employing Nereba or Caffeine will do the opposite.*\n</code></pre>"},{"location":"faq/#what-formats-can-homebrew-come-in","title":"What formats can homebrew come in","text":"<p>Homebrew can come in two different formats, namely in <code>nro</code> files and in <code>bin</code> files.</p> <ul> <li><code>nro</code> Files are placed in the <code>switch</code> folder on your microSD card and can be launched using the Homebrew menu.</li> <li><code>bin</code> This format is used as a payload and is to be pushed in RCM using a payload launcher like tegrarcmgui on windows and fusee-interfacee-tk on other operating systems.</li> </ul> <p>Homebrew risks Be careful with launching downloaded homebrew! If you don't know the source, it's best not to launch it. Homebrew can potentially damage your system! Atmosph\u00e8re provides protections against common bricking methods, but these are not guaranteed to always work!</p>"},{"location":"faq/#what-microsd-cardformat-should-i-use","title":"What microSD card/format should I use?","text":"<p>microSD cards that are 32GB or smaller can be used for homebrew, but are not recommended as these will not permit you to have a full NAND dump and/or an emuMMC on them.</p> <p>The recommended microSD card size is 128GB. This will permit you to make a full NAND dump as well as having enough space to run an emuNAND in the future while also having adequate space for homebrew.</p> <p>The recommended filesystem format is FAT32. While the Switch supports exFAT through an additional update from Nintendo, this filesystem is prone to corruption and as a result is not advisable.</p>"},{"location":"faq/#fake-microsd-cards","title":"Fake microSD cards","text":"<p>Do not buy microSD cards from sites like eBay. These microSD cards are often fake and do not have the advertised amount of storage and will result in data corruption if used. Amazon has had some problems with fake microSD cards, so we recommend buying them at a physical store. Even on trustworthy sites, always, always check reviews on a product before buying!!</p> <p>If you suspect your microSD card is fake or damaged, see the instructions here to verify the integrity of your microSD card.</p>"},{"location":"faq/#my-homebrew-is-not-showing-up-on-the-menu","title":"My homebrew is not showing up on the menu","text":"<p>This is an issue primarily affecting macOS users, but may occur on other devices as well. If you are able to launch the homebrew menu, but you are not seeing some or any of your homebrew, you will need to unset the archive bit with Hekate.</p> <ol> <li>Send the Hekate payload to your Switch by following these instructions: here</li> <li>Click on <code>Tools</code> on the top menu bar</li> <li>In the bottom left corner click on <code>Archive bit * AutoRCM</code></li> <li>Click on <code>Fix Archive bit</code> - this might take a while</li> <li>Press <code>Close</code> in the top right corner</li> <li>Press <code>Home</code> in the top menu bar to get back from where you started</li> <li>Follow the instructions at the Launching CFW page here to launch Atmosphere.</li> </ol>"},{"location":"extras/","title":"Extras","text":"<p>Several extra guides that are not required for basic usage can be found here.</p> <p>They are listed in the sidebar.</p>"},{"location":"extras/#commonly-used-guides","title":"Commonly used guides:","text":"<ul> <li>Get started</li> <li>Updating CFW</li> <li>Blocking Nintendo servers</li> <li>Changing microSD cards</li> </ul>"},{"location":"extras/adding_udev/","title":"Linux - Run payload sender without root","text":"<p>This section details how to add an udev rule to let you send a payload to the Nintendo Switch without needing to use <code>sudo</code>.</p> <p>The following instructions only work if you have a system that implements <code>udev</code>. Most modern distros come with <code>systemd</code> already installed, which includes a <code>udev</code> implementation.</p> <p>Do the following instructions while your Switch is not connected to your computer.</p> <p> </p>"},{"location":"extras/adding_udev/#option-1-manually-adding-rules-and-group","title":"Option 1: Manually adding rules and group","text":"<p>The following instructions are not for beginners. Only do this if you understand what you are doing.</p>"},{"location":"extras/adding_udev/#creating-a-new-group","title":"Creating a new group","text":"<p>To start, we will create a new group and add ourselves to it. The group the Nintendo Switch device will be owned by on Linux will be set to this group.</p> <ol> <li>Open a terminal.</li> <li>Enter the following command: <code>sudo groupadd nintendo_switch</code>.</li> <li>Enter your password when prompted.</li> <li>Enter the following command: <code>sudo usermod -a -G nintendo_switch $USER</code>. Make sure that the <code>G</code> is capitalized!</li> <li>Close the terminal.</li> </ol>"},{"location":"extras/adding_udev/#adding-a-udev-rule","title":"Adding a udev rule","text":"<p>Next we're gonna add a new udev rule. udev is a device manager for the linux kernel. The rule we're gonna specify is that if the Switch is connected in RCM mode, the group the Switch belongs to will be the group we made in the previous section.</p> <ol> <li>Open a terminal.</li> <li>Change to the root user with the following command: <code>sudo -i</code>. Enter your password when prompted.</li> <li>Enter the following command: <code>mkdir -p /etc/udev/rules.d</code>.</li> <li>Enter the following command: <code>echo 'SUBSYSTEMS==\"usb\", ATTRS{manufacturer}==\"NVIDIA Corp.\", ATTRS{product}==\"APX\", GROUP=\"nintendo_switch\"' &gt; /etc/udev/rules.d/10-switch.rules</code>.</li> <li>Enter the following command: <code>udevadm control --reload</code>.</li> <li>Enter the following command: <code>udevadm trigger</code>.</li> <li>Logout and log back in.</li> </ol> <p>You should now be able to run the payload sender without having to use <code>sudo</code>.</p> <p> </p>"},{"location":"extras/adding_udev/#option-2-installing-a-package-with-the-rules","title":"Option 2: Installing a package with the rules","text":"<p>Note:</p> <p>These rules will actually allow ANY user to access your Switch via USB, not only your user.</p> <p>You may just follow the instructions at nx-udev, or if you're on Ubuntu / Debian:</p> <ol> <li>Download nx-udev_latest_all.deb.</li> <li>Open a terminal in the same directory as your download.</li> <li>Run <code>sudo dpkg -i nx-udev_latest_all.deb</code> to install the package</li> </ol> <p>You should now be able to run the payload injector and homebrew with USB communication without having to use <code>sudo</code>.</p>"},{"location":"extras/alternate_bootsetups/","title":"Alternate boot setups","text":"<p>If you need to troubleshoot something, or need to try a different boot setup, read on.</p> <p>Do I need any of these?</p> <p>Unless you are experiencing problems with booting or Atmosph\u00e8re itself, it's strongly recommended to use the main guide instead of these. They are provided for the sake of completeness.</p> <p> </p>"},{"location":"extras/alternate_bootsetups/#chainloading-fusee-from-hekate","title":"Chainloading Fusee from Hekate","text":"<p>What you need</p> <ul> <li>The latest release of Hekate</li> <li>The latest release of Atmosph\u00e8re<ul> <li>You will need to download both the release zip and the <code>fusee.bin</code></li> </ul> </li> <li>hekate_ipl.ini</li> </ul>"},{"location":"extras/alternate_bootsetups/#instructions","title":"Instructions","text":"<ol> <li>Insert your Switch's microSD card into your PC</li> <li>Copy the contents of the Atmosphere <code>.zip</code> file to the root of your microSD card</li> <li>Copy <code>fusee.bin</code> to the <code>atmosphere</code> folder on your microSD card</li> <li>Copy the <code>bootloader</code> folder from the Hekate <code>.zip</code> file to the root of your microSD card</li> <li>Copy <code>hekate_ipl.ini</code> to the <code>bootloader</code> folder on your microSD card</li> <li>Setup is complete, now you can boot CFW by injecting the hekate_ctcaer <code>.bin</code> file from the Hekate zip</li> </ol>"},{"location":"extras/alternate_bootsetups/#using-fusee-without-hekate","title":"Using Fusee without Hekate","text":"<p>What you need</p> <ul> <li>The latest release of Atmosph\u00e8re<ul> <li>You will need to download both the release zip and the <code>fusee.bin</code></li> </ul> </li> </ul>"},{"location":"extras/alternate_bootsetups/#instructions_1","title":"Instructions","text":"<ol> <li>Insert your Switch's microSD card into your PC</li> <li>Copy the contents of the Atmosphere <code>.zip</code> file to the root of your microSD card</li> <li>Setup is complete, now you can boot CFW by injecting <code>fusee.bin</code></li> </ol>"},{"location":"extras/autorcm/","title":"AutoRCM","text":""},{"location":"extras/autorcm/#autorcm","title":"AutoRCM","text":"<p>What is AutoRCM?</p> <p>AutoRCM causes the console to believe it is bricked, and will automatically launch RCM upon boot for recovery purposes, without needing a jig. As RCM is a recovery mode from repair specialists, this is an intended feature from the device developer, though is also considered a softbrick. If you aren't careful, misuse of AutoRCM can lead to real damage, especially with units that cannot inject custom RCM payloads (like Mariko hardware). Please take care when using it. Please keep in mind that the console can no longer boot on its own, so you'll need a PC, phone, or other payload injector to start the console after a coldboot.</p> <p>Note: If the console screen stays black when pressing the power button after activating AutoRCM, remember that it's not broken. It's in RCM.</p> <p>If you don't have a BOOT0/1 backup yet...</p> <p>You really want to kill your console, huh? If you haven't made a BOOT0/1 backup yet, it is recommended to make one right now.</p> <ol> <li>Boot Hekate</li> <li>Go to <code>Tools</code>, and select <code>Backup eMMC</code></li> <li>Then tap <code>eMMC BOOT0 &amp; BOOT1</code> and let the process complete.</li> </ol> <p>Disadvantages of AutoRCM</p> <p>There are some disadvantages you should consider before installing AutoRCM:</p> <ul> <li>Please keep in mind that the console can no longer boot on its own, so you'll need a PC, phone, or other payload injector to start the console after letting the console fully shut off. (AutoRCM by itself is considered a \"tethered jailbreak\").     Note: Sleep Mode is not considered \"powering off/on\" the console. Sleep Mode will still work as intended and is fully unchanged with AutoRCM.</li> <li>When completely discharged, your Switch will take a very long time to charge while in RCM. To solve this, charge the console for approximately twenty minutes before booting into Hekate and selecting a boot option. After it's done booting, the console will now charge at a normal speed with a battery icon in the corner.</li> <li>When a system update is completed while stock firmware is running, AutoRCM becomes disabled so you need to turn it on again. AutoRCM can be preserved by updating while CFW is active.</li> </ul> <p>Advantages of AutoRCM</p> <p>AutoRCM can be used for good as well:</p> <ul> <li>If you were having trouble getting into RCM before (i.e you were using the tinfoil method), now you can get into RCM without any hassle.</li> <li>If you want to keep fuses unburned, you can do so with AutoRCM, as the Switch never gets the chance to burn them. Nintendo's bootloaders burn the fuses, but those bootloaders cannot be used if AutoRCM is enabled.     Note: updating the console while booted into Hekate's \"stock\" configuration will clear AutoRCM on the next reboot. Please update while using custom firmware, or be sure to use a jig after the console reboots.</li> <li>It's easier to inject a payload using a payload injector, as using your jig and booting into RCM manually is no longer required.</li> </ul> <p>Other information...</p> <ul> <li>This method corrupts a single byte in both your BOOT0 and your BOOT1 partitions. This is why a backup of those is recommended.</li> </ul> <ul> <li>This software version of AutoRCM can almost always be reversed, so don't freak out if it doesn't work out the way you'd like it to.</li> </ul> <p>If, despite all of the warnings above, you still wish to install AutoRCM, and understand the risks, do the following:</p> <ol> <li>Boot Hekate</li> <li>Go to <code>Tools</code></li> <li>At the bottom of the page, tap <code>Arch Bit \u2022 AutoRCM \u2022 Touch \u2022 Pkg1/2</code></li> <li>Then tap <code>AutoRCM</code>. It will show a little <code>ON</code> next to the option once you have done this.</li> </ol>"},{"location":"extras/blocking_nintendo/","title":"Blocking Nintendo servers","text":"<p>This page will help you set up a method to block all communication with Nintendo. This will stop any updates and reporting to Nintendo, but it will prevent use of the eShop and online games.</p>"},{"location":"extras/blocking_nintendo/#instructions-ams-dns-redirection","title":"Instructions (AMS DNS redirection)","text":"<p>You can configure Atmosph\u00e8re to automatically redirect any requests directed to Nintendo to nothing instead. Documentation about this feature can be found here. The section below will help you set up DNS redirection on your emummc. Note that this will only apply when you are using cfw.</p>"},{"location":"extras/blocking_nintendo/#what-you-need","title":"What you need:","text":"<ul> <li>emummc.txt</li> <li>Atmosph\u00e8re 0.18.0 or higher</li> </ul>"},{"location":"extras/blocking_nintendo/#setup","title":"Setup:","text":"<ol> <li>Insert your microSD into your PC</li> <li>Enter the Atmosphere folder</li> <li>If it doesn't exist already, create a folder named <code>hosts</code> in the <code>/atmosphere</code> folder</li> <li>Copy the emummc.txt into the hosts folder<ul> <li>If you want to apply the DNS redirection to sysmmc instead of emummc, rename the file to <code>sysmmc.txt</code></li> </ul> </li> </ol> <p>Verify functionality</p> <p>You can verify the functionality of the DNS redirection by booting into emummc (or sysmmc if you applied the config to sys), and powering off after.</p> <p>A report will be generated in sd:/atmosphere/logs called <code>dns_mitm_startup.log</code>. If this starts with the following, the dns redirection is active</p> <p></p> <p> </p>"},{"location":"extras/blocking_nintendo/#instructions-90dns","title":"Instructions (90DNS)","text":"<p>You can add a custom DNS to your WiFi connection that will block all communication with Nintendo's servers. We will be using 90DNS, a community-run custom DNS server. If you prefer, you can run your own DNS server following the instructions on the GitLab repository.</p> <p>Enter the console's System Settings, and then proceed to the Internet tab. From here:</p> Location Primary DNS Secondary DNS Europe (Server located in France) <code>163.172.141.219</code> <code>207.246.121.77</code> America (Server located in the USA) <code>207.246.121.77</code> <code>163.172.141.219</code> <p>Example for a 90DNS connection with the Europe settings: </p> <p> </p>"},{"location":"extras/blocking_nintendo/#setting-up-a-new-connection-via-wifi","title":"Setting up a new connection via WiFi","text":"<p>Open WiFi networks without a password</p> <p>Not all WiFi networks require a password to connect. If your network does not use one, you can use the <code>Manual Setup</code> option, located at the very bottom of the <code>Internet Settings</code> screen below all other WiFi networks.</p> <ol> <li>Select your WiFi network from the list of networks.</li> <li>Enter an incorrect password that is 8 characters long and press <code>OK</code>.</li> <li>After a few moments of attempting to connect, the console will display a connection error.</li> <li>Press <code>OK</code> to close the error message.</li> <li>Press <code>Close</code> when it offers to display more details about the error.</li> <li>When asked if you want to re-enter the password, pick <code>View Settings</code>.</li> <li>Change <code>DNS Settings</code> to <code>Manual</code>.</li> <li>Pick the server that is the closest to your location out of the below chart and enter its <code>Primary</code> and <code>Secondary</code> DNS into your connection settings.</li> <li>Enter the correct password for your WiFi connection.</li> <li>Save the settings and test the connection.</li> </ol>"},{"location":"extras/blocking_nintendo/#editing-an-existing-wifi-connection","title":"Editing an existing WiFi connection","text":"<ol> <li>Select your existing WiFi network from the list of networks.</li> <li>Select <code>Change Settings</code>.</li> <li>Pick the server that is the closest to your location out of the below chart and enter its Primary and Secondary DNS into your connection settings.</li> <li>Save the settings and test the connection.</li> </ol>"},{"location":"extras/blocking_nintendo/#using-homebrew-to-set-90dns-on-all-existing-wifi-networks","title":"Using homebrew to set 90DNS on all existing WiFi networks","text":"<ol> <li>Download switch-90dns-setter and put it in the <code>/switch</code> folder.</li> <li>Launch CFW and open the homebrew menu.</li> <li>Launch <code>90DNS Setter</code>.</li> <li>Press X to apply 90DNS to all WiFi networks.</li> <li>Press Y to reboot the Switch.</li> <li>Check in system settings if networks have a custom DNS applied.</li> </ol>"},{"location":"extras/blocking_nintendo/#testing-if-you-can-reach-nintendo","title":"Testing if you can reach Nintendo","text":""},{"location":"extras/blocking_nintendo/#testing-via-the-eshop-stock","title":"Testing via the eShop (Stock)","text":"<ol> <li>Open the eShop. Wait until it either opens or displays an error</li> <li>If it displays \"Unable to display page.\" you seem to have Nintendo blocked</li> </ol>"},{"location":"extras/blocking_nintendo/#testing-via-a-homebrew-app-cfw","title":"Testing via a homebrew app (CFW)","text":"<ol> <li>Download the latest release of the 90DNS Tester</li> <li>Place the <code>Switch_90DNS_tester.nro</code> in the <code>switch</code> folder on your SD</li> <li>Enter the homebrew menu and run the 90DNS Tester</li> <li>After the test finished it should look similar to the below picture, with every <code>nintendo</code> domain being blocked</li> </ol>"},{"location":"extras/cheats/","title":"Games cheats","text":"<p>For cheats management, EdiZon is recommended. It has support for Atmosphere's cheat engine, providing an easy way to download new cheats, as well as toggle them on or off.</p> <p> </p>"},{"location":"extras/cheats/#instructions","title":"Instructions","text":"<p>Atmosph\u00e8re looks for cheats to load in the <code>contents</code> sub-folder of the <code>atmosphere</code> folder. The template it looks for is <code>sd:/atmosphere/contents/&lt;title_id&gt;/cheats/&lt;build_id&gt;.txt</code>.     You need to create the <code>&lt;title_id&gt;</code> folder and sub-folders manually:</p> <pre><code>- `title_id` being the title or program of a game. This is game specific.\n- `build_id` being the version of a game. Cheats can be version specific so make sure the cheats you are using are compatible with your version.\n\n**Note: On Atmosph\u00e8re 0.9.4 and below `contents` is called `titles`**.\n\nSwitch game title IDs and build IDs can be found using the cheat menu of EdiZon (TID and BID, see below for a sample). Once the title is launched while in Atmosphere, your cheats should be applied.\n</code></pre> <p>Preventing cheats from being active</p> <p>To prevent cheats from being enabled by default, you can change your Atmosph\u00e8re configuration:</p> <ul> <li>Copy <code>system_settings.ini</code> from <code>/atmosphere/config_templates</code> to <code>/atmosphere/config</code> if it is not already there.</li> <li>Edit the line <code>; dmnt_cheats_enabled_by_default = u8!0x1</code> to <code>dmnt_cheats_enabled_by_default = u8!0x0</code>.     Make sure to remove the space and the semicolon \" ;\"</li> </ul> <p>By default, holding the L button while launching a game will disable any cheat.</p> <p>For more in-depth details about Atmosphere's cheat engine, you can refer to this page.</p> <p>Cheats in EdiZon</p> <p>Here the title ID of the game (TID) is \"0100646009FBE000\" and the build ID of the game (BID) is \"0B9A75586BC1A6C6\". Cheats are loaded from <code>sd:/atmosphere/contents/0100646009FBE000/cheats/0B9A75586BC1A6C6.txt</code>.</p> <p></p>"},{"location":"extras/game_modding/","title":"Game modding with LayeredFS","text":"<p>LayeredFS, a tool built in to Atmosphere, allows you to replace game files with your own.</p> <p> </p>"},{"location":"extras/game_modding/#instructions","title":"Instructions","text":"<p>Make a folder on your microSD card inside the <code>atmosphere/contents/</code> folder, with the name being the title ID of the game you would like to replace the files of. For example if you want to do mods of The Legend of Zelda: Tears of the Kingdom the path would be <code>atmosphere/contents/0100F2C0115B6000/</code>. Switch game title IDs can be found on http://nswdb.com/.</p> <p>If you have a pre-made mod, the files would be placed here. Some mods may include the title ID or the entire path for you to merge. Mods will usually come as a compressed format and need to be extracted to use. There may be a folder named <code>romfs</code> or <code>exefs</code> or both that need to go in the title ID folder. If the mod doesn't come with these you'll need to find the file path of the assets it is replacing yourself and set up the folder structure on your SD card inside of the title ID folder.  Then, once the title is launched while in Atmosphere, your mod should load. By default, holding the L button while launching a game will disable any mod.</p> <p>Atmosphere 0.9.4 and below</p> <p>Note: On Atmosph\u00e8re 0.9.4 and below <code>contents</code> is called <code>titles</code></p> <p></p>"},{"location":"extras/glossary/","title":"Glossary of common hacking terms","text":"<p>This section is dedicated to explaining a number of common terms that are used when hacking the Nintendo Switch as well as linking a number of resources that can help fledgling developers or curious users.</p>"},{"location":"extras/glossary/#hacking-terms","title":"Hacking terms","text":"<p>The following list is in alphabetical order.</p> <ul> <li>90DNS: DNS that blocks system updates on the Nintendo Switch. This can be enabled by following the guide here.</li> <li>Atmosph\u00e8re: The CFW developed by the Atmosphere-NX organization on GitHub and the one used in this guide.</li> <li>AutoRCM: A method that corrupts parts of your boot0 and boot1, causing the Switch to boot into RCM automatically. Using this requires an additional peripheral (such as a computer, phone, dongle, or modchip) to be able to boot your Switch.</li> <li>boot0 and boot1: Two partitions of the Switch NAND.</li> <li>bootROM: An initial system loader whose primary purpose is to initialise a device's hardware and prepare it for use. It is also typically responsible for authenticating hardware and software necessary to start the device. A bootROM is a ROM, meaning that it is etched into the device and cannot be rewritten or upgraded without replacing the hardware entirely.</li> <li>CFW: Short for custom firmware. CFW is a collection of patches which partially or largely modify the functionality of the underlying OS. It is not used to refer to the usage of brand new operating systems entirely.</li> <li>Deja Vu: An unreleased exploit chain for the Nintendo Switch. The completely unpatched version of this chain will grant access to TrustZone, which effectively means being able to enter CFW. The TrustZone part of this exploit was patched in firmware version 5.0.0 and up, but normal homebrew access can still be gained up to firmware version 6.0.1.</li> <li>DNS: Domain Name System. Basically, the internet's addressbook. If you visit a website, the DNS lookup is what tells you what server the site is hosted on.</li> <li>Dongle: Device you can plug in the USB-C of your Switch to automatically send a payload if your Switch is in RCM.</li> <li>Encryption keys: Keys used to encrypt data from the Nintendo Switch.</li> <li>BIS keys: Built-in Storage keys. They are used to encrypt/decrypt the NAND's contents.</li> <li>fusee-gelee/ShofEL2: Two names for two different implementations of the same exploit. This is an exploit that grants full bootROM access to the Nintendo Switch from the Tegra X1's RCM, and permitting us to run CFW. This exploit requires an external device or a tiny hardware modification. fusee-gelee is developed by an ex-ReSwitched developer, while ShofEL2 is developed by the failoverfl0w team. This guide uses fusee-gelee.</li> <li>hactool: Software used to decrypt Nintendo Switch files like .XCI and .NSP files.</li> <li>Hekate: A bootloader for the Nintendo Switch. The current guide uses this in combination with essential files from Atmosph\u00e8re to boot CFW.</li> <li>Homebrew: Unsigned code that can be ran on the Nintendo Switch. Examples of homebrew include save editors, emulators and ports of PC games, but can also include completely original games. To run this code, you need to have an exploit.</li> <li>Homebrew launcher: Software developed by the Switchbrew team that lets you run other Homebrew.</li> <li>Jig: Refers to a piece of hardware that you can put in the Joycon rail to enter RCM.</li> <li>KIP: Short for Kernel Initial Process. These files can be loaded in when the Switch boots in CFW and provide additional functionality.</li> <li>NAND: Referred to as \"Internal Storage\" within Nintendo's consoles, this is the storage chip that the console saves the system software and internal settings to. The name refers to the type of logic gate employed, known as \"not-AND\" in this case.</li> <li>nx-hbloader: Intermediary program used to load the Homebrew Launcher from CFW developed by Switchbrew. Comes bundled with Atmosphere.</li> <li>PRODINFO: A partition on the NAND of your Switch. This along with boot0 and boot1 is the only part of your Switch that can render it unbootable if improperly modified. Atmosph\u00e8re backs up this partition on booting and it is included in your NAND backup.</li> <li>qLaunch: This is similar to the HOME Menu on the Nintendo 3DS. It serves as a launcher for many applets such as System Settings, the main home menu (ResidentMenu), User/Friends Page (myPage), Lock Screen (Entrance), News menu (Notification), and so on.</li> <li>ReSwitched: A hacking team that is one of the main developers for Atmosph\u00e8re.</li> <li>RCM: A shorthand for \"Recovery Mode\". When talking about hacking the Switch, this commonly refers to the Recovery Mode in the Tegra X1 chip that is included in the Nintendo Switch. Can be entered by holding down the Tegra X1 home button. This button is not the same as the home button on the joycons. Ways of pressing this button can be found here.</li> <li>ROM: \"Read-only memory\"; a section of data that cannot be modified once it is written.  Some forms of ROM can be rewritten under very specific scenarios, such as EEPROM (electronically-erasable/programmable ROM).</li> <li>TegraRCMGUI/fusee-interface-tk: Software used to run the fusee-gelee exploit on the Switch.</li> <li>Stock: \"Stock\" generally refers to the original factory operation or state of something.  For example, stock firmware means the original operation of Horizon, not using CFW.</li> <li>Tegra X1: A chip made by Nvidia that is used in the Nintendo Switch.</li> <li>Trinket: A category of modchip that is soldered on the Switch motherboard to automatically send a payload if it is in RCM. They are not necessarily always the Trinket brand, as this refers to the category of modchip.</li> <li>TrustZone: The highest security level on the Switch.</li> <li>XCI/NSP: Format used to dump games to. XCI is used for gamecard dumps, while NSP is for dumping digital titles.</li> </ul>"},{"location":"extras/glossary/#resources","title":"Resources","text":"<p>The resources below are for users and developers interested in developing Homebrew or for those that want to get a more technical understanding of the various concepts.</p> <ul> <li>The ReSwitched FAQ lists a general overview of how the Switch works.</li> <li>Switchbrew is a wiki detailing the inner workings of the Nintendo Switch's firmware.</li> <li>libNX documentation. LibNX is the library used to develop Homebrew on the Nintendo Switch.</li> </ul>"},{"location":"extras/installing_android/","title":"Installing Android","text":"<p>Installing Android on the Nintendo Switch</p> <p>This page details the installation of Android 11 based on LineageOS onto your Switch. The Switch lacks a cell modem; simply installing Android does not transform your Switch into a tablet that has mobile data with the capability to call people over a mobile network. It can, however, natively run Android programs and games. This installation is not an \"Android emulator\" of any kind, it is real Android, running directly off of the microSD card.</p> <p>This will delete everything on your microSD card!</p> <p>This process includes formatting the microSD card, which means all data on it will be lost. Now is a good time to back up all of its data to a safe place so that you can restore it later. If you have an emuMMC, follow these steps to back it up.</p> <p>This page will detail the setup of the latest release of Switchroot Android, Android 11, for your Nintendo Switch. This page assumes that you have no previous installation, so please do not follow this if you already have Switchroot Android installed on your microSD card, as it will overwrite your data. This page will not detail things such as rooting and overclocking; these types of additions can be found under the Extras category.</p>"},{"location":"extras/installing_android/#requirements","title":"Requirements","text":"<ul> <li>A Nintendo Switch that runs Hekate      If you don't already possess this, follow the main guide up until you see this page</li> <li>A microSD card larger than 8GB</li> <li>A USB-C cable that connects to your</li> <li>PC</li> </ul>"},{"location":"extras/nandrestore/","title":"Restoring a NAND Backup","text":""},{"location":"extras/nandrestore/#restore-a-nand-backup-to-the-switch","title":"Restore a NAND backup to the Switch","text":"<p>Warning:</p> <p>-This will reset all of your saves, games, system version and other system settings back to a point when you made the the nand backup. Keep this in mind, as you probably don't have to restore a nand backup unless you have bricked your Switch or want to go back online safely after using cfw.</p> <p>-If you're going to restore an old NAND which will downgrade your firmware it's best to create a second NAND backup before restoring the first one in case something goes wrong.</p>"},{"location":"extras/nandrestore/#what-you-need","title":"What you need:","text":"<ul> <li>Your <code>rawnand.bin</code> (Combined or in 15 or 30 parts)</li> <li>Your <code>BOOT0</code> and <code>BOOT1</code><ul> <li>If you're missing any of the files above, ask for further help in the Nintendo Homebrew Discord server.</li> </ul> </li> <li>The Hekate Payload</li> <li>A microSD card larger than 32GB</li> </ul>"},{"location":"extras/nandrestore/#instructions","title":"Instructions:","text":"<p>Before we start, check if you have a tree of folders called <code>backup/[8 Character NAND id]/restore</code> on your microSD card.</p> <p>If you don't see a backup or [8 Character NAND id] folder on your microSD card:</p> <p>This means you do not have a nand backup, it is highly recommended you make one as soon as possible. Follow the steps below to make one.</p> <ol> <li>Launch the latest Hekate payload on your Switch.</li> <li>Navigate to <code>Tools &gt; Backup eMMC &gt; eMMC BOOT0 &amp; BOOT1</code> and let it do its thing.</li> <li>Wait for the process to complete. When it's completed, you now have a <code>backup/[8 Character NAND id]/restore</code> folder on your microSD card. Continue with step 1 of the guide.</li> </ol> <ol> <li>Copy your <code>rawnand.bin</code> (combined or in 15 or 30 parts), <code>BOOT0</code>, and <code>BOOT1</code> to the <code>backup/[8 Character NAND id]/restore</code> folder on the microSD card.</li> <li>Put your microSD card into your Switch, and launch Hekate.</li> <li>Navigate to <code>Tools &gt; Restore eMMC</code>. Select <code>Restore eMMC BOOT0 &amp; BOOT1</code>. Wait for this process to complete.</li> <li>In that same menu, select <code>eMMC RAW GPP</code> and wait for the process to complete. This will take a very long time to complete.</li> </ol> <p>If you're downgrading using your NAND backup</p> <p>If the security version you were on before you performed the NAND restore is HIGHER than the NAND backup itself, you have to enable autoRCM to not get stuck in a boot crash. A system update is considered a security version when a fuse is burned, you can check which versions burn fuses here.</p> <p>If you were in autorcm before you upgraded to a newer security version (and still were after the upgrade) you don't have to do this.</p> <ol> <li>In Hekate's main menu, navigate to <code>Tools</code> and go to the bottom of the page where you will find a button called <code>Archive bit - AutoRCM</code></li> <li>Select the <code>AutoRCM</code> buttom and you will see <code>ON</code> written next to it. This means it is enabled.</li> </ol>"},{"location":"extras/rcm_injectors/","title":"RCM Payload Injectors","text":"<p>There are currently multiple RCM payload injectors available from multiple different companies and individuals. These devices remove the need to use a computer or smartphone when hacking an unpatched Switch. Each injector has its own advantages and disadvantages, listed below:</p> Name Manufacturer RCM Jig Included? RCM Jig Storage? Standard Payload (.bin) Support? Payload on SD Support? Multi-Payload Support? Battery Life Recharge Time Price (USD) Misc Info AceNS (Old) Ace3DS Team \u2714\ufe0f \u274c \u2714\ufe0f \u274c \u2714\ufe0f N/A (Capacitors) 10 seconds $18.00\u200b (Discontinued) Not Recommended: Overpriced clone of the RCMLoader Zero AceNS (New) Ace3DS Team \u2714\ufe0f \ufe0f \u2714\ufe0f \u2714\ufe0f \u274c \u2714\ufe0f 45mAh LiPo (~1000 injections) 1 hour $17.50 Not Recommended: Overpriced clone of the RCMLoader One AceNS Pro Ace3DS Team \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f (Required) \u274c 45mAh LiPo (~1000 injections) 1 hour $42.90 Not Recommended: Overpriced clone of the RCMLoader One with multiple features missing DragonInjector MatinatorX \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f (Required) \u2714\ufe0f 40mAh CR1612 (~4000 injections) Non-Rechargeable (Replacable) $30.00\u200b (Discontinued) Fits in the Switch's gamecard slot NS-Atmosphere Generic \u2714\ufe0f \u2714\ufe0f \u274c \u274c \u274c 150mAh LiPo (&gt;1000 injections) &gt;1 hour $13.15 Not Recommended: Unsafe jig, overly bulky, changing payload requires installing a program, lack of .bin support complicates usage R4S R4i-SDHC Team \u2714\ufe0f \u274c \u2714\ufe0f \u2714\ufe0f \u274c 120mAh LiPo (~1000 injections) 1 hour $19.99 RCMLoader Zero Xkit \u2714\ufe0f \u274c \u2714\ufe0f \u274c \ufe0f \u2714\ufe0f N/A (Capacitors) 10 seconds $5.99\u200b (Discontinued) RCMLoader One Xkit \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c \u2714\ufe0f 45mAh LiPo (~1000 injections) 1 hour $9.99 SX Gear Team Xecuter \u2714\ufe0f \u274c \u274c \u2714\ufe0f (Required) \u274c N/A (Supercapacitors) 5-10 seconds $24.95 Not Recommended: Lack of .bin support complicates usage SX Pro Team Xecuter \u2714\ufe0f \u274c \u274c \u2714\ufe0f (Required) \u274c N/A (Supercapacitors) 5-10 seconds $49.99 Not Recommended: Lack of .bin support complicates usage"},{"location":"extras/save_management/","title":"Save Management","text":"<p>For save management, JKSV is recommended. It can be used to back up and restore game saves to your microSD card.</p> <p>Checkpoint is also a save manager. It can be used to back up and restore game saves to your microSD card. It also has the ability to share save data over FTP and WiFi.</p> <p> </p>"},{"location":"extras/save_management/#jksv","title":"JKSV","text":"<p>Please read JKSV's homepage for information on how to use it.</p> <p></p>"},{"location":"extras/save_management/#checkpoint","title":"Checkpoint","text":"<p>Please read Checkpoint's homepage for information on how to use it.</p> <p></p>"},{"location":"extras/showing_file_extensions/","title":"Showing File Name Extensions on Windows 10","text":"<p>By default, Microsoft Windows 10 does not show file extensions for known file types. This can result in problems when you need to rename files.</p> <p> </p>"},{"location":"extras/showing_file_extensions/#instructions","title":"Instructions","text":"<ol> <li>Open a new File Explorer window.</li> <li>Switch to the View tab/ribbon.</li> <li>On this tab, if the \"File name extensions\" checkbox is blank, put a check/tick mark in it by clicking it.</li> </ol>"},{"location":"extras/theming/","title":"Theming","text":"<p>You can create unique styles and layouts for your Switch Home Menu.</p> <p> </p> <p></p> <p>What to follow</p> <p>Follow the <code>Making a theme</code> section if you want to make a theme.</p> <p>Follow the <code>Installing a theme</code> section if you want to install a theme</p> <p>Follow the <code>Installing a custom font</code> sectio n if you want to install a custom font</p> <p> </p>"},{"location":"extras/theming/#making-a-theme-windows","title":"Making a theme (Windows)","text":""},{"location":"extras/theming/#what-you-need","title":"What you need","text":"<p>The latest release of Switch Theme Injector</p> <ul> <li>You need to download the <code>ReleaseVx.x.zip</code> on the download page</li> </ul>"},{"location":"extras/theming/#making-the-theme","title":"Making the theme","text":"<ol> <li>Unzip <code>ReleaseVx.x.zip</code> to somewhere on your PC's drive.</li> <li>Open up the <code>SwitchThemes.exe</code> app. Navigate to <code>NXTheme Builder</code>.</li> <li>Select a Home menu part, A 720p image and a Layout patch. Click on <code>Build NXTheme</code> after selecting your home menu part, image and layout patch.</li> <li>Fill out the details in the window that pops up. After filling out this window and clicking ok, you will get asked where to save the NXTheme file. Save this file to a temporary folder.</li> <li>Repeat step 3 and 4 for every Home Menu part of the Switch you want to modify.</li> </ol>"},{"location":"extras/theming/#making-a-theme-mac-linux-chrome-os","title":"Making a theme (Mac / Linux / Chrome OS)","text":""},{"location":"extras/theming/#making-the-theme_1","title":"Making the theme","text":"<p>Make sure that the images you want to use are 1280x720 and in JPG!</p> <ol> <li>Navigate to Exelix's Web Injector.</li> <li>Select a Theme Target you want to edit. After this, click the Open an Image button and select your background image.</li> <li>Choose a theme name and an author name and optionally a different layout, then click build NxTheme.</li> <li>Your browser will prompt you to download a file. Save this file to a temporary folder.</li> <li>Repeat step 2 to 4 for every Home Menu part of the Switch you want to modify.</li> </ol> <p> </p>"},{"location":"extras/theming/#installing-a-theme","title":"Installing a theme","text":"<p>Community Themes</p> <p>If you want to use community themes, for example from the r/NXThemes, you can follow the guide below to install a community provided nxtheme.</p> <p>Homebrew app store</p> <p>If you want to use the homebrew app store for themes, you can simply install the theme you want via the appstore, and follow the instructions from step 2 onwards below.</p> <ol> <li>Copy the <code>.nxtheme</code> files to the <code>themes</code> folder on your microSD card (It is recommended you put them into their own folders, e.g. /themes/awesome_theme/awesome.nxtheme).<ul> <li>Create the <code>themes</code> folder on the root of your microSD card if it does not exist. \u00a0</li> </ul> </li> <li>Boot Switch CFW, launch the Homebrew Menu and launch <code>NXThemes Installer</code>.</li> <li>Your theme files should be listed here. You can install them one by one.</li> <li>Reboot your Switch to see the changes.</li> </ol> <p> </p>"},{"location":"extras/theming/#installing-a-custom-font","title":"Installing a custom font","text":"<ol> <li>Put a font in the .ttf file format into the <code>themes</code> folder (It is recommended you put them into their own folders, e.g. /themes/cool_font/font.ttf).</li> <li>Boot Switch CFW, launch the Homebrew Menu and launch <code>NXThemes Installer</code>.</li> <li>Find your font and install it.</li> <li>Reboot your Switch to see the changes.</li> </ol>"},{"location":"extras/theming/#troubleshooting","title":"Troubleshooting:","text":"<p>My Switch crashes on boot after I installed a theme!:</p> <ul> <li>You installed a bad theme. You can remove it by going into the <code>/atmosphere/contents/0100000000001000/romfs/lyt</code> and deleting every file in that folder.</li> <li>Note: <code>contents</code> is called <code>titles</code> on Atmosph\u00e8re versions 0.9.4 and below.</li> </ul> <p>The NXTheme installer crashes when I launch it:</p> <ul> <li>This is probably due to the archive bit being set on either the app or the nxthemes. This is usually the result of copying files to a microSD card via a Mac. If you are experiencing this issue, try resetting the archive bit via Hekate for all files.</li> </ul>"},{"location":"extras/transfer_sd/","title":"Changing microSD cards","text":"<p>The goal of this page is to transfer the contents from one microSD card to another one. The method to do this will differ, depending on whether you're using a partition based emuMMC on your microSD card or not.</p> <p>We will be using hekate to both backup and restore the emuMMC, so make sure that you have its latest files on your microSD card already.</p>"},{"location":"extras/transfer_sd/#instructions","title":"Instructions","text":"<p>You should first check whether you have a file or partition based emuMMC:</p> <ol> <li>Inject the Hekate payload.</li> <li>Tap on <code>emuMMC</code>.</li> <li>Under <code>emuMMC Info &amp; Selection</code>, check the text next to <code>Type</code>.<ul> <li>If you have one it should be either <code>SD Raw Partition</code> or <code>SD File</code>.</li> </ul> </li> </ol>"},{"location":"extras/transfer_sd/#if-you-are-using-a-file-based-emummc-or-are-using-no-emummc-at-all","title":"If you are using a file based emummc or are using no emummc at all:","text":"<ol> <li>Remove your  microSD card.   </li> <li>Insert your old microSD card into your computer.</li> <li>Copy the contents of your microSD card somewhere to your PC.</li> <li>Eject the microSD card and insert your new one.</li> <li>Format your new microSD card to FAT32 if it isn\u2019t already.<ul> <li>To do this, use guiformat for example (Windows).</li> </ul> </li> <li>Copy the files from your PC to your new microSD card and you\u2019re done.</li> </ol>"},{"location":"extras/transfer_sd/#if-you-are-using-a-partition-based-emummc","title":"If you are using a partition based emummc:","text":"<p>Space for the backup</p> <p>You need at least 30GB of free space to be able to backup and restore the emuMMC!</p> <ol> <li>Inject the Hekate payload.</li> <li>In the main menu, tap on <code>Tools</code>, then <code>Backup eMMC</code> and set <code>SD emuMMC Raw Partition</code> at the bottom of your screen to <code>ON</code>.</li> <li>Backup both <code>SD emuMMC BOOT0 &amp; BOOT1</code> and <code>SD emuMMC RAW GPP</code> (Note: raw gpp may take a while).</li> <li>Once both are done, go back to the main menu, remove your microSD card and insert it into your PC.</li> <li>If Windows asks you to format a drive, discard it and select the drive with your SD contents.</li> <li>Copy the contents of your microSD card somewhere to your PC.</li> <li>Follow only this page to partition the new microSD card for an emuMMC setup.</li> <li>After it\u2019s done, exit and insert your new microSD card into your PC.</li> <li>Copy the contents of your old microSD card to your new one.</li> <li>Navigate to <code>/backup/&lt;some characters&gt;/emummc</code> on your microSD card and move <code>BOOT0</code>, <code>BOOT1</code> and the <code>rawnand.bin.xx</code> files to <code>/backup/&lt;some characters&gt;/restore/emummc</code>.</li> <li>Eject the microSD card and insert it into your Switch.</li> <li>Inject the Hekate payload once again.</li> <li>Tap on <code>Tools</code>, <code>Restore eMMC</code>, set <code>SD emuMMC Raw Partition</code> at the bottom of your screen to <code>ON</code>.</li> <li>Restore the backup by tapping on both <code>SD emuMMC BOOT0 &amp; BOOT1</code> and <code>SD emuMMC RAW GPP</code> (Note: raw gpp may take a while).<ul> <li>It is very important that for both of these the <code>SD emuMMC Raw Partition</code> option is enabled, otherwise you will be altering your sysMMC   which is not what you want.</li> </ul> </li> <li>Your emuMMC is now restored on the new microSD card and you should be able to launch it from <code>Launch</code> -&gt; <code>Atmosphere FSS0 emuMMC</code> in hekate.</li> </ol>"},{"location":"extras/updating/","title":"Keeping your system up-to-date","text":"<p>This page documents how you can keep your system up-to-date.</p> <p>After following our guide, your system will consist of three core elements that can be updated. Atmosphere, Hekate and your system firmware.</p>"},{"location":"extras/updating/#updating-atmosphere","title":"Updating Atmosphere","text":"<p>When updating Atmosph\u00e8re, always make sure to read the release notes. They may list important changes and modifications to your system.</p> <p>Updating from below Atmosph\u00e8re 1.0.0</p> <p>If you update from below Atmosph\u00e8re 1.0.0, there are additional steps to follow. You will have to delete the <code>sept</code> folder from your microSD, delete <code>fusee-secondary.bin</code> from your <code>atmosphere</code> folder and update your Hekate config file: hekate_ipl.ini in the <code>bootloader</code> folder.</p> <p>When a new version of Atmosph\u00e8re releases, you can update Atmosph\u00e8re by following these steps:</p> <ol> <li>Turn off your Nintendo Switch and plug your microSD card in your computer.</li> <li>Download the latest release of Atmosphere (Download the <code>atmosphere-(version)-master-(version)+hbl-(version)+hbmenu-(version).zip</code> release of Atmosphere.)</li> <li>Copy the contents of the Atmosphere <code>.zip</code> file to the root of your microSD card.<ul> <li>If you are prompted to overwrite files, do so.</li> </ul> </li> <li>(If your Hekate is not on the latest version) Update Hekate via the steps below</li> <li>Put your microSD card back in your Switch and launch CFW.</li> </ol>"},{"location":"extras/updating/#updating-hekate","title":"Updating Hekate","text":"<p>When updating Hekate always make sure to read the release notes. They may list important changes and modifications to your system.</p> <p>When a new version of Hekate releases, you can update by following these steps:</p> <ol> <li>Turn off your Nintendo Switch and plug your microSD card in your computer.</li> <li>Download the latest version of Hekate (Download the <code>hekate_ctcaer_(version).zip</code> release of hekate).</li> <li>Copy the <code>bootloader</code> folder from the Hekate <code>.zip</code> file to the root of your microSD card. If you are asked to overwrite or merge files while copying, say yes to merge/overwrite them.</li> <li>Put your microSD card back in your Switch and launch Hekate.</li> <li>Go to the Options tab at the top right of the screen. Turn \"Update Reboot 2 Payload\" on the bottom right ON (if it isn't on already). Tap \"Save Options\" at the bottom of the screen.</li> </ol>"},{"location":"extras/updating/#updating-your-firmware","title":"Updating your firmware","text":"<p>Always check before updating your system firmware if the latest version of Atmosph\u00e8re as well as the latest version of Hekate support the firmware version you are updating towards.</p> <p>In addition, updating to or past some firmwares update the gamecard firmware. Reference the table below for information about these.</p> Updating from Updating towards Updates gamecard firmware Below 4.0.0 Below 4.0.0 No Below 4.0.0 4.0.0 or above Yes On or above 4.0.0, but below 9.0.0 At least 4.1.0 but below 9.0.0 No On or above 4.0.0, but below 9.0.0 9.0.0 or above Yes On or above 9.0.0, but below 11.0.0 At least 9.1.0 but below 11.0.0 No On or above 9.0.0, but below 11.0.0 11.0.0 or above Yes On or above 11.0.0 but below 12.0.0 At least 11.0.1 but below 12.0.0 No On or above 11.0.0 but below 12.0.0 12.0.0 or above Yes On or above 12.0.0 Latest supported Atmosph\u00e8re &amp; Hekate revision No <p>If at least one of the versions you are updating towards also updates the gamecard firmware, you will not be able to downgrade below that version without making the gamecard slot unusable until you update.</p> <p>Atmosphere (and Hekate) come bundled with patches that automatically disable the gamecard slot if it is detected that the system has an older gamecard firmware that would be updated. If you boot into RCM on each boot (for example by using AutoRCM), this means that the gamecard slot will not be updated and you can downgrade below that version. If this happens, you will not be able to use the gamecard slot as long as you are on the newer firmware.</p> <p>Otherwise, you can safely update your system firmware through the system settings.</p> <p>Note about autoRCM</p> <p>If you have autoRCM enabled and you're updating your system while in stock firmware, updating will disable autoRCM and you will need to enter RCM manually to boot custom firmware again. To prevent autoRCM from being disabled, boot CFW on sysMMC and update through settings from there, as booting without AutoRCM will burn any preserved fuses.</p>"},{"location":"extras/updating/#about-emummc","title":"About emuMMC","text":"<p>sysMMC and emuMMC have separate system firmwares and need to be updated separately.</p> <p>If you keep your emuMMC offline, you will have to use a gamecard to update your system firmware, synchronize it with another Nintendo Switch or dump an updated firmware from your sysMMC.</p>"},{"location":"extras/updating/#updating-emummc-by-dumping-an-updated-firmware-from-your-sysmmc","title":"Updating emuMMC by dumping an updated firmware from your sysMMC","text":"<p>Do you have an eMMC backup yet?</p> <p>Please do not start this guide without doing a RAW GPP and a BOOT 0/1 eMMC backup!</p> <p>You can learn how to make one here.</p> <p>Downgrading</p> <p>This guide is made for updating your emuMMC. It is not for downgrading. Downgrading at all, sysMMC or emuMMC, is not recommended and not worth it. Downgrading is also very dangerous and can lead to serious complications even when performed correctly.</p>"},{"location":"extras/updating/#what-you-will-need","title":"What you will need","text":"<ul> <li>The latest release of TegraExplorer</li> <li>The latest release of Atmosphere</li> </ul>"},{"location":"extras/updating/#preparing-your-microsd-card","title":"Preparing your microSD card","text":"<ol> <li>Insert your microSD card into your computer.</li> <li>Download <code>TegraExplorer.bin</code> and place it somewhere on your PC (A good idea is to put it where you keep all your Switch payloads like Hekate).</li> <li>Update Atmosph\u00e8re and Hekate by using the above guides.</li> <li>If you haven't already, update the sysMMC to the latest firmware.</li> </ol>"},{"location":"extras/updating/#dumping-your-sysmmc-firmware","title":"Dumping your sysMMC firmware","text":"<ol> <li>Make sure your sysMMC is up to date. If your sysMMC is not up-to-date, update it through the System Settings.</li> <li>Inject <code>TegraExplorer.bin</code> using TegraRCMGUI (Like you would with Hekate).</li> <li>Using the joystick and the A buttons, select <code>FirmwareDump.te</code>, then select <code>Dump sysmmc</code>.</li> <li>Wait about 1-2 minutes for the tool to dump your firmware.</li> <li>When the tool finishes, press any button.</li> <li>Select <code>Reboot to atmosphere/reboot_payload.bin</code>.</li> </ol>"},{"location":"extras/updating/#updating-your-emummc-with-daybreak","title":"Updating your emuMMC with Daybreak","text":"<ol> <li>In Hekate go to <code>Launch -&gt; Atmosphere FSS0 emuMMC</code>.</li> <li>Once booted, hold <code>R</code> while launching a game to boot into the homebrew menu.</li> <li>Find Daybreak in the homebrew menu and launch it.</li> <li>Tap on <code>Install</code> and navigate to <code>tegraexplorer/Firmware/&lt;latest firmware number&gt;</code>.</li> <li>Tap on <code>Continue</code> and then <code>Preserve settings</code>.<ul> <li>If you see the message <code>Warning: exFAT firmware is missing or corrupt</code>, you likely don't have the exFAT drivers installed on your sysMMC. Just press continue if this is the case.</li> </ul> </li> <li>If it is available choose <code>Install (FAT32 + exFAT)</code>, otherwise <code>Install (FAT32)</code> and then <code>Continue</code>.</li> <li>Wait until Daybreak completes installing the dumped firmware.</li> <li>Once it completes, it will ask if you want to reboot. Tap <code>Reboot</code>.</li> <li>Once rebooted, launch into emuMMC and verify your system works. You can verify your system has been properly updated in <code>Settings -&gt; System</code>.</li> </ol>"},{"location":"user_guide/getting_started/","title":"Getting Started","text":""},{"location":"user_guide/getting_started/#finding-your-serial-number","title":"Finding your serial number","text":"<p>In the RCM path, we'll first determine if your Switch is vulnerable to \"fusee-gelee\", the exploit we will be using to launch CFW.</p> <p>Note</p> <p>This vulnerability was discovered independently by different Switch hacking teams, who all independently released versions of the exploit in April 2018. Nintendo and NVIDIA were informed 90 days before before these releases, and patched consoles were launched by mid-2018. NVIDIA publicly acknowledged the flaw in April as well. In July 2019, Nintendo announced updated consoles: the Switch Lite (HDH-001), and a new model of original Switch (HAC-001-01 / \"V2\") with better battery life. Both of these new models use the Tegra X1+ (also known as Mariko, the T214, and T210B01) with a brand-new bootROM, and cannot currently be hacked without a modchip.</p> <p>Patched and Mariko units can be identified by their serial number. This number can be found in the Settings applet at System -&gt; Serial Information. You can also find it on the bottom of the console, adjacent to the charging port. However, it is always more accurate to use the serial reported in Settings instead, especially if you aren't the original owner of the console.</p> <p> </p> <p></p> <p> </p> <p> </p>"},{"location":"user_guide/getting_started/#determining-if-your-switch-is-vulnerable","title":"Determining if your Switch is vulnerable","text":"<p>The community has crowdsourced a list of known serial numbers which are vulnerable to fusee-gelee.</p> <ul> <li>If your serial number is on this list as \"potentially patched\", follow the notice directly after this list.</li> <li>If your serial number is listed as \"patched\", there is nothing you can do at this time besides installing a modchip (hardware modification. It requires experience with microsoldering.).</li> <li>If your system is patched, it is highly advised to keep it on 7.0.1 or lower, if possible, as there may be a vulnerability for these versions in the far future. DO NOT update patched consoles past 7.0.1 if you want to ever have a chance of running homebrew and/or CFW on them if you do not have the skills required to install a modchip.</li> </ul> <p>Notice</p> <p>If you are unsure if your serial is patched, you can test your console yourself following the instructions here.</p> <p> </p>"},{"location":"user_guide/getting_started/#serial-list","title":"Serial list","text":"<p>The following information is based on this GBATemp thread.</p> Serial Numbers Unpatched Potentially patched Patched XAW1 XAW10000000000 to XAW10074000000 XAW10074000000 to XAW10120000000 XAW10120000000 and up XAW4 XAW40000000000 to XAW40011000000 XAW40011000000 to XAW40012000000 XAW40012000000 and up XAW7 XAW70000000000 to XAW70017800000 XAW70017800000 to XAW70030000000 XAW70030000000 and up XAJ1 XAJ10000000000 to XAJ10020000000 XAJ10020000000 to XAJ10030000000 XAJ10030000000 and up XAJ4 XAJ40000000000 to XAJ40046000000 XAJ40046000000 to XAJ40060000000 XAJ40060000000 and up XAJ7 XAJ70000000000 to XAJ70040000000 XAJ70040000000 to XAJ70050000000 XAJ70050000000 and up XAK1 N/A XAK10000000000 and up N/A <p>If your serial number is not listed above, your device is not vulnerable to the fusee-gelee exploit.</p> <p> </p>"},{"location":"user_guide/getting_started/#console-preparation","title":"Console Preparation","text":"<p>Important</p> <p>Before setting up for homebrew, install at least one eShop title to utilize \"title takeover\", an Atmosph\u00e8re feature that allows homebrew to use more resources than they would normally have. Try downloading a free game (like Fallout Shelter), application (like YouTube), or a game demo (like 10 Second Run RETURNS). Running the Homebrew Menu via a game cartridge is an alternative, but requires the game to be inserted any time you want to launch the Homebrew Menu. Generally, title takeover doesn't permanently alter the donor game or application.  Once you obtain any bootable title, you are prepared to continue on with the guide.</p> <p> </p>"},{"location":"user_guide/getting_started/#version-table","title":"Version Table","text":"<p>Note</p> <p>While the \"New\" Switch (HAC-001-01)'s earliest possible firmware is 7.0.1, it is not vulnerable to d\u00e9j\u00e0 vu, the exploit used by Nereba and Caffeine, because of hardware differences from the \"old\" Switch (HAC-001).</p> Firmware Version Unpatched Switch systems (HAC-001) Patched Switch systems (HAC-001) \"New\" Switch (HAC-001-01) Switch Lite (HDH-001) 1.0.0 Nereba or RCM N/A N/A N/A 2.0.0 - 3.0.2 Caffeine or RCM N/A N/A N/A 4.0.0 - 4.1.0 Caffeine or RCM Caffeine N/A N/A 5.0.0 - 7.0.0 RCM Wait for CFW N/A N/A 7.0.1 RCM Wait for CFW Cart update to 8.0.1 N/A 8.0.1 RCM Wait for homebrew Wait for homebrew Wait for homebrew 8.1.0 and up RCM Unhackable (currently) Unhackable (currently) Unhackable (currently) <p>About OLED</p> <p>OLED Switch models (HEG-001) are currently unhackable via software.</p> <p>If your Switch is not patched, Continue to RCM </p> Frequently Asked Questions about this page <ul> <li>Q: How reliable is the crowdsourced list of vulnerable serial numbers, and what if my serial number is not listed?        A: Generally, we have not seen any deviation from these boundaries. Unless your serial is potentially patched, you can be certain that the table is accurate to reality.</li> <li>Q: Why is it essential to install at least one eShop title before setting up homebrew, and what is \"title takeover\"?        A: By default, the Homebrew menu and its apps are taking over the Album applet, causing unfavorable behavior for homebrew programs as applets don't have nearly as many resources as full apps do. Title takeover ensures the best performance, and is required for some homebrew.</li> <li>Q: Why is the \"New\" Switch (HAC-001-01) not vulnerable to d\u00e9j\u00e0 vu, and what are the implications for Switch Lite (HDH-001) and OLED Switch consoles?        A: Despite being exploitable via software, d\u00e9j\u00e0 vu is actually a bootROM exploit that isn't present in the new bootROM of the Tegra X1+.</li> </ul>"},{"location":"user_guide/all/cfw_environment/","title":"Choosing an Environment","text":""},{"location":"user_guide/all/cfw_environment/#cfw-on-sysmmc-vs-cfw-on-emummc","title":"CFW on sysMMC vs. CFW on emuMMC","text":"<p>A \"CFW Environment\" describes the context in which you are using custom firmware (CFW). As a reminder, custom firmware is never permanently installed, and runs independently on top of the system firmware. This means that you never have to commit to where you want to use custom firmware.</p> <p>Atmosph\u00e8re temporarily patches the OS to enable customisations. You can choose what version of the OS it patches, each time you turn on your system. Each option has its own benefits and drawbacks.</p> <ul> <li>For the purposes of this guide, the suffix -NAND and -MMC are interchangeable.</li> </ul> <p>Generally, <code>sys-</code> refers to the physical storage chip inside of your Switch. It stands for \"system\".</p> <p>Generally, <code>emu-</code> refers to a virtual version of the OS, running from a microSD card. It stands for \"emulated\".</p> <p>For more information on terminology, please refer to the glossary.</p> <p>You get to decide! Your choices are between using the internal storage or emulated storage. The following will go over the advantages and disadvantages of either decision.</p>"},{"location":"user_guide/all/cfw_environment/#syscfw-cfw-on-sysmmc","title":"sysCFW (CFW on sysMMC)","text":""},{"location":"user_guide/all/cfw_environment/#cfw-on-sysmmc-has-the-following-benefits","title":"CFW on sysMMC has the following benefits:","text":"<ul> <li>Parity of system settings, save data, and titles between CFW usage and standard usage (no need to duplicate digital games)</li> <li>Significantly lower microSD card storage requirements</li> <li>Possibility of online play during CFW use</li> <li>Fast console response time</li> <li>Longer microSD card lifespan</li> </ul>"},{"location":"user_guide/all/cfw_environment/#the-following-drawbacks","title":"The following drawbacks:","text":"<ul> <li>A brick risk for risky behaviors, especially for modchip users [info]</li> <li>A Nintendo server ban risk for misbehavior [info]</li> <li>No custom app installations on the HOME Menu (guaranteed ban)</li> <li>No possibility of custom profile pictures (guaranteed ban)</li> </ul> <p>If you prefer snappiness, online play, and a seamless transition between official features and custom features, you may consider using CFW on sysMMC. In this guide, sysMMC is assumed to be utilised for online play.</p>"},{"location":"user_guide/all/cfw_environment/#in-particular-here-are-just-some-popular-use-cases-for-syscfw","title":"In particular, here are just some popular use-cases for sysCFW:","text":"<ul> <li>Enjoying CFW features such as custom sysmodules and homebrew apps</li> <li>Dumping eShop games, saves, and encryption keys for preservation or installation on emuMMC or external Switch emulators</li> <li>Restoring modified save data for many games</li> <li>Custom fonts and home menu theming</li> <li>Modifying and cheating in most offline games (and some online games; [info])</li> </ul>"},{"location":"user_guide/all/cfw_environment/#emummc-cfw","title":"emuMMC CFW","text":""},{"location":"user_guide/all/cfw_environment/#cfw-on-emummc-has-the-following-benefits","title":"CFW on emuMMC has the following benefits:","text":"<ul> <li>No risk of bans as long as emuMMC remains offline from Nintendo [info]</li> <li>A safe area to test dangerous or risky mods and homebrew</li> <li>No chance of bricking and losing console-unique information while using CFW</li> </ul>"},{"location":"user_guide/all/cfw_environment/#cfw-on-emummc-has-the-following-drawbacks","title":"CFW on emuMMC has the following drawbacks:","text":"<ul> <li>Large microSD size requirement (32GB or 64GB will be reserved, depending on if you use an Switch OLED or not)  This also means a minimum of 128GB is required (unless you are an advanced user and can resize the USER partition of your NAND)</li> <li>Slower console response times</li> <li>No official online play while in CFW</li> <li>More microSD card wear over time</li> <li>Doubled digital game storage requirements </li> </ul>"},{"location":"user_guide/all/cfw_environment/#and-the-following-considerations","title":"And the following considerations:","text":"<p>No parity between sysMMC and emuMMC (Game installs, save data, and system settings will be separated when you boot between the two)</p> <p>If you prefer foolproofing, and a separation between official features and custom features, you may consider using CFW on emuMMC. In this guide, emuMMC is assumed to be utilised for offline play.</p>"},{"location":"user_guide/all/cfw_environment/#in-particular-here-are-just-some-popular-use-cases-for-cfw-on-emummc","title":"In particular, here are just some popular use-cases for CFW on emuMMC:","text":"<ul> <li>Installing game cartridges</li> <li>Restoring modified save data for any game</li> <li>Modding and cheating in any game</li> <li>Custom fonts and home menu theming</li> <li>Downgrading titles to base versions, without mandatory updates</li> <li>Enjoying CFW features such as custom sysmodules and homebrew apps</li> </ul> <p>To proceed with CFW on sysMMC, click on the following button: Continue with the sysCFW path </p> <p>To proceed with CFW on emuMMC, click on the following button: Continue with the emuMMC path </p>"},{"location":"user_guide/all/cfw_environment/#modchip-instability","title":"Modchip Instability","text":"<p>Modchips</p> <p>Modchips directly infiltrate communication with the internal storage chip. Due to this, there are slight chances of NAND backups being tainted with corrupted data. If a bad backup is restored to sysNAND, the console can be bricked, and a modchip alone won't be able to fix it. To be safe, either only run an emuMMC on a console with a modchip, verify BOOT0/1 backups using tools like NXNandManager (Windows) or test NAND backups by running them as emuMMCs before you flash them to the sysNAND.</p>"},{"location":"user_guide/all/launching_cfw/","title":"Launching CFW","text":"<p>Now that the preparation work is out of the way, we're finally ready to launch custom firmware on the Switch.</p> <p>Unlike systems such as the DSi, Wii, or 3DS, Switch CFW is currently volatile. It will only work as long as your Switch is on. As soon as your Switch completely loses power for any reason (shutting down, battery dying, etc.), CFW will no longer be active and you will need to follow these instructions again.</p> <p>Keep emuMMC offline at all times</p> <p>Your emuMMC (emuNAND) should never connect to Nintendo. For online play, eShop browsing, or any other Nintendo online activity, use your sysNAND. Using both emuMMC and sysNAND online will likely result in a ban.</p> Instructions for emuMMCInstructions for sysCFW <ol> <li>From hekate's <code>Home</code> menu, navigate to the <code>Launch</code> menu.</li> <li>Find <code>Atmosphere FSS0 emuMMC</code> and launch it.</li> </ol> <p>Hekate is now booting into your emuMMC. To verify that your emuMMC launched properly, open System Settings and navigate to System. You should see <code>AMS</code> next to the version number (<code>AMS</code> indicating that you're booted into Atmosphere), as well as an <code>E</code> at the end (indicating you are booted into emuMMC).</p> <p></p> <ol> <li>From hekate's <code>Home</code> menu, navigate to the <code>Launch</code> menu.</li> <li>Find <code>Atmosphere FSS0 sysMMC</code> and launch it.</li> </ol> <p>Hekate is now booting into sysCFW. To verify that sysCFW launched properly, open System Settings and navigate to System. You should see <code>AMS</code> next to the version number (<code>AMS</code> indicating that you're booted into Atmosphere), as well as an <code>S</code> at the end (indicating you are booted into sysCFW).</p> <p></p> <p> </p> <p>Rebooting to Hekate</p> <p>Once booted into CFW, you can easily get back to Hekate by holding the power button, and selecting <code>Restart</code> in the power menu or by using the \"reboot to payload\" homebrew app in the homebrew menu. (Note that while the Reboot to Payload app app does not work on modchipped Switch consoles, those already automatically run payloads upon reboot in the first place by default.)</p>"},{"location":"user_guide/all/launching_cfw/#launching-the-homebrew-menu","title":"Launching the Homebrew Menu","text":"<p>You will now be able to launch the Homebrew Menu by opening the album or by holding the R button while launching any game (including demos/cartridges), or application (e.g. YouTube/Hulu). If R is not held, the game or application will launch like normal.</p> <p>A note about using the album for the Homebrew Menu</p> <ul> <li>Using Album for the Homebrew Menu instead of a game or application has several limitations, including but not limited to: a smaller amount of available memory (RAM), as well as being unable to launch a full-featured web browser. It is strongly recommended to launch homebrew through applications or games instead.</li> </ul>"},{"location":"user_guide/all/launching_cfw/#what-the-included-homebrew-applications-do","title":"What the included homebrew applications do","text":"<ul> <li> <p>JKSV is a save manager, it can dump and restore saves from/to your system. For more information, see Save Management</p> </li> <li> <p>FTPD is a FTP tool for connecting your Switch's SD contents wirelessly to your PC. Tools like WinSCP can connect to your Switch on <code>(IP of Switch):5000</code></p> </li> <li> <p>NX-Shell is a file explorer for the Switch. You can move files, listen to MP3 files, view images etc.</p> </li> <li> <p>NXThemeInstaller is a theme installer app. See the Theming section of our guide for more information</p> </li> </ul> <p>If you wish to install more homebrew apps, place them (<code>.nro</code> files) in the <code>switch</code> folder on your microSD card.</p>"},{"location":"user_guide/all/launching_cfw/#installing-androidlinux","title":"Installing Android/Linux","text":"<p>If you've partitioned your microSD card for preparation of Android/Linux earlier, you can continue with the installation of Android/Linux here with the guides below:</p> <p>Android installation guide  Linux installation guide </p>"},{"location":"user_guide/all/making_essential_backups/","title":"Making Essential Backups","text":""},{"location":"user_guide/all/making_essential_backups/#making-a-nand-backup","title":"Making a NAND Backup","text":"<p>Important</p> <p>A NAND backup is crucial to have, it's a full backup of the internal storage of your Switch and can be used to restore the device to a working state in case of emergencies. DO NOT SKIP THIS STEP</p> <p>Once the backup is finished, keep it somewhere safe. The best backup is the one you have but never need, and the worst backup is the one you need but never made. To save space, it's recommended to compress the end-result with a <code>.zip</code> file or something similar.</p> <p>It's highly recommended that you use an microSD card that is formatted to FAT32 and has at least 32 gigabytes of space free. This will still work on smaller cards, but it's not ideal.</p>"},{"location":"user_guide/all/making_essential_backups/#instructions","title":"Instructions:","text":"<ol> <li>Enter RCM and inject the Hekate payload.<ul> <li>If you use a modchipped Switch, you can simply just turn your Switch on with the Hekate payload renamed to <code>payload.bin</code> on the root of your SD.</li> </ul> </li> <li>Use the touch screen to navigate to <code>Tools</code> and then <code>Backup eMMC</code></li> <li>Tap on <code>eMMC BOOT0 &amp; BOOT1</code><ul> <li>This should only take a few seconds, but if your microSD card is very slow, it may take around a minute.</li> </ul> </li> <li>Tap on <code>Close</code> to continue, then tap on <code>eMMC RAW GPP</code><ul> <li>This will take a long time. Expect it to take between 10 minutes to an hour (or more, if your microSD card is very slow).</li> <li>On FAT32 microSD cards or cards that have less than 32 gigabytes of space available, the NAND will be split into 1 or 2 gigabyte parts.</li> <li>Hekate will stop producing these parts when it runs out of space. When this happens, do the following:</li> <li>Power off your system.</li> <li>Insert your microSD card into your PC.</li> <li>Move all files from the <code>backup</code> folder on your microSD card to a safe location on your PC.</li> <li>Insert your microSD card into your Switch.</li> <li>Enter RCM again, inject Hekate again, and continue the backup by tapping on <code>Tools</code> &gt; <code>Backup eMMC</code> &gt; <code>eMMC RAW GPP</code></li> <li>Repeat the process until the NAND is completely dumped.</li> </ul> </li> <li>Go to the top right and press <code>Close</code> &gt; <code>Home</code></li> <li>Navigate to <code>Tools</code> &gt; <code>USB tools</code> &gt; <code>SD card</code> and plug your Switch into your PC via USB.</li> <li>Copy the <code>backup</code> folder on your microSD card to a safe location on your PC.</li> <li>Once done, eject the <code>UMS</code> device safely from within your computer's operating system and return to hekate's <code>Home</code> menu.</li> </ol> <p>Continue to Launching CFW </p>"},{"location":"user_guide/all/partitioning_sd/","title":"Partitioning the SD Card and creating the emuMMC","text":"<p>This will delete everything on your microSD card</p> <p>This process includes formatting the microSD card, which means all data on it will be lost. Now is a good time to back up all of its data (namely the <code>/Nintendo</code> folder) to a safe place so that you can restore it later. You can do this by following the instructions below. The Nintendo folder contains downloaded necessary game data (the data required for games to actually run). You will need to copy the Nintendo folder to <code>SD:/emuMMC/RAW1/</code> after creating the emuMMC.</p>"},{"location":"user_guide/all/partitioning_sd/#what-you-need","title":"What you need:","text":"<ul> <li>Your Switch loaded into Hekate</li> </ul>"},{"location":"user_guide/all/partitioning_sd/#instructions","title":"Instructions:","text":"<ol> <li>Navigate to <code>Tools</code> &gt; <code>Partition SD card</code></li> <li>Set the <code>emuMMC (RAW)</code> slider to <code>29 FULL</code> in the middle of the bar.<ul> <li>Set the <code>emuMMC (RAW)</code> slider to <code>58 FULL</code> if you're on an OLED Switch.</li> <li>If you wish to install Android and/or Linux later, partition your microSD card here accordingly by moving the sliders you see during this step. We recommend setting the <code>Android (USER)</code> and <code>Linux (EXT4)</code> sliders to 16GB minimum.</li> </ul> </li> <li>Navigate to <code>Next Step</code> at the bottom right, then select <code>Start</code> in the menu that appears.</li> <li>From hekate's <code>Home</code> menu, navigate to <code>emuMMC</code> &gt; <code>Create emuMMC</code> &gt; <code>SD Partition</code> &gt; <code>Part 1</code> and wait for Hekate to complete creating the emuMMC.</li> <li>Close the emuMMC creation menu by navigating to the <code>Close</code> button, then navigate to <code>Change emuMMC</code> &gt; <code>SD RAW 1</code> and press the <code>Close</code> button twice in the top right to return to hekate's <code>Home</code> menu.</li> <li>Once done, go to <code>Tools</code> &gt; <code>USB tools</code> &gt; <code>SD card</code> and plug your Switch into your PC via USB.</li> <li>Continue with the next step of the guide.<ul> <li>Your microSD card should now be accessible on your PC, if not, consult the warning message below.</li> </ul> </li> </ol> <p>Your microSD card is not showing up or Windows complaining about an unreadable drive</p> <p>If you get the issue that Windows says the microSD card is unreadable and wants to format it, do not format! This is likely your emuMMC partition. After partitioning your SD, your microSD will show up as 2 drives on your PC. Use the accessible drive. If your microSD card isn't showing up at all, ensure that you're using a USB cable capable of data transfer and that, if you use Windows, Windows has assigned a drive letter to the FAT32 partition of your SD. If you still experience errors, join the NH Discord server for support.</p> <p></p> <p> </p> <p>Continue to SD Preparations </p>"},{"location":"user_guide/all/partitioning_sd_syscfw/","title":"Formatting and/or partitioning the SD","text":"<p>This will delete everything on your microSD card</p> <p>Doing this will delete all your data from your microSD card, be warned! Back up your <code>Nintendo</code> folder (if you used your microSD card for game storage already) and any other folders/files on the root of your microSD card beforehand using the instructions below. The Nintendo folder contains downloaded necessary game data (the data required for games to actually run). You will need to copy the Nintendo folder to <code>SD:/emuMMC/RAW1/</code> after creating the emuMMC.</p>"},{"location":"user_guide/all/partitioning_sd_syscfw/#what-you-need","title":"What you need:","text":"<ul> <li>Your Switch loaded into Hekate</li> </ul>"},{"location":"user_guide/all/partitioning_sd_syscfw/#instructions","title":"Instructions:","text":"<ol> <li>Navigate to <code>Tools</code> &gt; <code>Partition SD card</code></li> <li>Navigate to <code>Next Step</code> at the bottom right, then select <code>Start</code> in the menu that appears.<ul> <li>If you wish to install Android and/or Linux later, partition your microSD card here accordingly by moving the sliders you see during this step. We recommend setting the <code>Android (USER)</code> and <code>Linux (EXT4)</code> sliders to 16GB minimum.</li> </ul> </li> <li>Once done, go to hekate's <code>Home</code> menu and then <code>Tools</code> &gt; <code>USB tools</code> &gt; <code>SD card</code> and plug your Switch into your PC via USB.</li> <li>Continue with the next step of the guide.<ul> <li>Your microSD card should now be accessible on your PC, if not, consult the warning message below.</li> </ul> </li> </ol> <p>Your microSD card is not showing up</p> <p>If your microSD card isn't showing up at all, ensure that you're using a USB cable capable of data transfer and that, if you use Windows, Windows has assigned a drive letter to the FAT32 partition of your SD. If you still experience errors, join the NH Discord server for support.</p> <p></p> <p> </p> <p>Continue to SD Preparations </p>"},{"location":"user_guide/all/sd_preparation/","title":"SD Preparation","text":"<p>We will now place the required files for the Atmosph\u00e8re custom firmware and some additional homebrew files on the microSD card.</p> <p>Atmosphere has its own bootloader, called fusee. For the purposes of this guide we will be using Hekate instead, so that we can back up the system's NAND (internal storage) and take advantage of other advanced features in the future.</p> <p>File name extensions</p> <p>If you use Windows, you should enable file name extensions before continuing. See this link for a guide on how to do this.</p>"},{"location":"user_guide/all/sd_preparation/#what-you-need","title":"What you need:","text":"<ul> <li>The latest release of Hekate (Download the <code>hekate_ctcaer_(version).zip</code> release of hekate)</li> <li>The Hekate config file: hekate_ipl.ini</li> <li>The DNS-MITM DNS redirection config: emummc.txt</li> <li>The bootlogo zip folder: bootlogos.zip</li> <li>The latest release of Atmosphere. Download the <code>atmosphere-(version)-master-(version)+hbl-(version)+hbmenu-(version).zip</code> release of Atmosphere.</li> <li>The latest release of JKSV (Download the <code>JKSV.nro</code> release of JKSV)</li> <li>The latest release of FTPD (Download the <code>ftpd.nro</code> release of FTPD)</li> <li>The latest release of NXThemeInstaller (Download the <code>NxThemesInstaller.nro</code> release of NxThemeInstaller)</li> <li>The latest release of NX-Shell (Download the <code>NX-Shell.nro</code> release of nx-shell)</li> </ul>"},{"location":"user_guide/all/sd_preparation/#instructions","title":"Instructions:","text":"<ol> <li>Navigate to the accessible drive.</li> <li>Copy the contents of the Atmosph\u00e8re<code>.zip</code> file to the root of your microSD card.</li> <li>Copy the <code>bootloader</code> folder from the Hekate <code>.zip</code> file to the root of your microSD card.</li> <li>Copy the <code>bootloader</code> folder from the <code>bootlogos.zip</code> file to the root of your microSD card.<ul> <li>If you're asked to merge the bootloader folders, do so.</li> </ul> </li> <li>Copy <code>hekate_ipl.ini</code> to the <code>bootloader</code> folder on your microSD card.</li> <li>Copy <code>Lockpick_RCM.bin</code> to the <code>/bootloader/payloads</code> folder on your microSD card.</li> <li>Create a folder named <code>hosts</code> inside the <code>atmosphere</code> folder on your microSD card, and put <code>emummc.txt</code> in it.</li> <li>Copy <code>JKSV.nro</code>, <code>ftpd.nro</code>, <code>NX-Shell.nro</code> and <code>NxThemesInstaller.nro</code> to the <code>switch</code> folder on your microSD card.</li> <li> <p>If you were already using your microSD card as a storage device for your games and backed up the Nintendo folder before partitioning your microSD card, please place it back on the root of your microSD card.</p> <ul> <li>If you created an emuMMC on the previous page, don't forget to copy the Nintendo folder to <code>SD:/emuMMC/RAW1/</code>!</li> </ul> <p>About emummc.txt</p> <p>Putting the <code>emummc.txt</code> file provided by this guide into <code>/atmosphere/hosts</code> will prevent your emuMMC (emuNAND) from connecting to Nintendo. Not doing this will likely result in a ban.</p> <p>Your microSD card should look similar to the image below. The <code>Nintendo</code> folder will not be present if your Switch has not already booted with the microSD card inserted and the <code>emuMMC</code> folder will not be present if you're following the sysCFW path of the guide/you haven't created an emuMMC! <code>payload.bin</code> will not be present if you're using an unpatched Switch.</p> <p></p> </li> </ol> <p>Continue to Making Essential Backups </p>"},{"location":"user_guide/modchip/","title":"Introduction to Modchips","text":"<p>information</p> <p>Unlike \"unpatched\" consoles, modchips enable CFW via CPU voltage glitching, which bypass bootROM firmware verifications. It allows a <code>payload.bin</code> file to be launched in place of BOOT0, loaded via a modchip firmware module named <code>sdloader</code>. This is much different from RCM and its exploit, fusee-gelee, which \"unpatched\" consoles use. Modchips allow any console (like all \"patched\" consoles) to run CFW!</p>"},{"location":"user_guide/modchip/#general-knowledge","title":"General knowledge","text":"<p>New to modchipped consoles? Here's what you need to know.</p> <p>Modchipped Switch consoles, except certain original V1 consoles made from 2017 to mid-2018, are immune to the fusee-gelee exploit in RCM. Attempting payload injection in RCM is futile; modchips are typically used on patched consoles in the first place.</p> <p>Depending on your modchip's firmware, you may not be able to boot the console without a microSD card inserted. This means without a microSD inserted at all times, your Switch becomes unusable.</p> <p>If you do turn on your Switch without a microSD card inserted, you should end up at a splash screen saying something along the lines of <code>NO SD</code>.</p> Note about modchips and their firmwares <p>Some modchip firmwares (e.g., Spacecraft-NX, Hwfly-NX and the Picofly firmware) allow bypassing <code>sdloader</code> by holding one - or both - of the volume buttons during power-on, enabling normal boot without a microSD card. Not all modchips support firmware upgrades.</p> <p>If you do turn on your Switch without a microSD card inserted, you should end up at a splash screen of <code>sdloader</code> saying something along the lines of <code>NO SD</code>.</p> <p>Modchipped Switch consoles allow untethered, coldboot CFW loading, directly entering custom firmware without external devices like dongles or jigs. This is in contrast to the tethered coldboot \"RCM\" entrypoint.</p> <ul> <li>\"Untethered coldboot\" means being able to turn on your console from a fully-off (\"cold\") state directly into custom firmware, without external devices such as a dongle, payload injector, or jig.</li> </ul> <p>Running CFW on modchipped consoles is more simplistic, as it only requires you to have <code>payload.bin</code> present on the root of your microSD card when you turn on the system.</p> <p>Before setting up for homebrew, install at least one eShop title to utilize \"title takeover\", an Atmosph\u00e8re feature that allows homebrew to use more resources than they would normally have. Try downloading a free game (such as Fallout Shelter), application (such as YouTube), or a game demo (such as 10 Second Run RETURNS). Running the Homebrew Menu via a game cartridge will also work, but it must be inserted every time you want to boot into homebrew. Title takeover does not permanently replace or remove the donor game/application, nor does it become tied to it specifically. Any installation or cartridge used for title takeover can always be used normally if you don't hold any buttons when booting that title.  Once you obtain any bootable title, you are prepared to continue on with the guide.</p>"},{"location":"user_guide/modchip/#important","title":"Important","text":"<p>If you do decide to follow the recommended emuMMC path later in the guide, make sure you disable Automatic Save Data Cloud backups/downloads beforehand as well as making sure the Switch is set as Primary Console.</p> <p>Disclaimer</p> <p>We ONLY support the Picofly modchip (the <code>RP2040 Zero</code> development board and the \"modchip variant\" of it). Installing a modchip safely is your responsibility, so if you don't trust yourself, get someone trusted to perform the install. There is always a risk of your Switch being rendered dysfunctional when messing with its hardware without proper experience. The NH Discord server is not for fixing bad modchip installations. We can give advice and installation tips for the installation as long as it's for a Picofly modchip.</p> <p>Continue to Preparing Hekate </p> Frequently Asked Questions about this page <ul> <li> <p>Q: Can you provide more information about modchip firmwares, specifically regarding their impact on the boot process and the ability to bypass the sdloader?          A: Modchip firmwares indirectly determine the functionality of your system. Modern modchips (such as Picofly) typically have firmware flashed to them that support all hardware configurations (namely eMMC brands like Hynix, Samsung and Toshiba) \"out-of-the-box\" and also allow you to bypass <code>sdloader</code>. If this is not the case however, flashing the firmware manually is required by opening up the Switch and using the USB debug port that comes with the modchip to flash the modchip directly. This is especially required in the cases where the eMMC brand is not supported, as your Switch wouldn't boot whatsoever and the modchip would be stuck while trying to glitch/train and write its payload to the <code>BOOT0</code> partition of the internal storage.</p> </li> <li> <p>Q: What different types of modchips are there?          A: There are three main types of modchips for the Nintendo Switch. Only two of them are relevant for this guide.         On the V1 Nintendo Switch, a chip can be installed which automatically injects a payload whenever the console is detected in RCM. This type of modchip is not supported by this guide.         On all other Switch consoles, there are DIY \"Picofly\" modchips which can be created with Raspberry Pi parts and custom cables. These use special firmwares, and are not compatible with firmwares intended for other modchips.         There are also other \"commercial\" modchips of dubious origin by the name of \"hwfly\" or \"SX Core/Lite\"; we only will help with flashing new firmwares onto these, if you happen to already have one of them installed. Do not ask for assistance installing or sourcing this type of modchip.</p> </li> <li> <p>Q: Can you further explain the concept of running homebrew \"over a title\" and why it allows for higher resource allocation?          A: The default way to run homebrew within Atmosph\u00e8re is via the Album applet on the HOME Menu. However, applets have significantly less resources compared to full applications, and homebrew tools often run into constraints with these limits. By holding a button while launching normal apps while in CFW, you can load the Homebrew menu in their stead with full resources.</p> </li> <li> <p>Q: What makes Picofly the only supported modchip, and what are the potential risks associated with installing a modchip on your Switch without proper experience?          A: Picofly is a fully open-source modchip, from the firmware to the RP2040 microcontroller it uses. Other \"commercial\" modchips have dubious origins, or were manufactured by established illegal piracy groups that have no place in the homebrew community. For the safety of your console and to respect the law of where NH Server is based, we will not assist with sourcing these types of modchips.</p> </li> </ul>"},{"location":"user_guide/modchip/preparing_hekate/","title":"Payload and bootloader folder placement","text":"<p>To get ready for formatting and/or partitioning your microSD card, we will need to prepare your it with the required files.</p>"},{"location":"user_guide/modchip/preparing_hekate/#what-you-need","title":"What you need:","text":"<ul> <li>The latest release of Hekate (Download the <code>hekate_ctcaer_(version).zip</code> release of Hekate)</li> <li>Your microSD card</li> </ul>"},{"location":"user_guide/modchip/preparing_hekate/#instructions","title":"Instructions:","text":"<ol> <li>Extract the Hekate <code>.zip</code> to a location on your computer.</li> <li>Insert your microSD card into your computer.</li> <li>Inside of the extracted Hekate folder, you will find <code>/bootloader</code> and <code>hekate_ctcaer_(version).bin</code></li> <li>Copy the <code>bootloader</code> folder and <code>hekate_ctcaer_(version).bin</code> payload to the root of your microSD card.</li> <li>Rename the <code>hekate_ctcaer_(version).bin</code> payload to <code>payload.bin</code></li> <li>Copy the <code>Nintendo</code> folder from the root of your microSD to a safe space on your device.</li> <li>Insert your microSD card back into your Switch, then turn it on.</li> <li>You should now be loaded into Hekate within seconds. If not, consult the warning message below.</li> </ol> <p>Warning</p> <p>If your Switch does not load into Hekate, or shows a <code>NO SD</code>/<code>No Payload</code> screen when turning on the console, ensure that you inserted your microSD card and Hekate's <code>payload.bin</code> is on the root of the microSD card.</p> <p>Continue to choosing your CFW environment </p> Frequently Asked Questions about this page <p>Q: Can I use a microSD card with existing data, or does it need to be formatted specifically for this process?    A: It is recommended that you use a microSD that is already formatted as FAT32 before starting. In addition, it is important that the microSD card does not have any data from other Switch consoles already on it.</p> <p>Q: What makes Hekate the recommended choice in this guide? How do you pronounce it?   A: Hekate is a polished, multi-purpose bootloader for the Switch. It has the tools to facilitate simple usage of custom firmware and custom operating systems, and aids with organisation and formatting later on in this guide.   Hekate comes from Greek. The most commonly accepted pronunciations are \"HEK-ate\", \"HEK-uh-tee\", and \"hek-AH-tay\". </p> <p>Q: What role does the <code>/bootloader</code> folder play in the overall functionality of Hekate?   A: The bootloader folder contains crucial parts of Hekate that can't fit in the injectable RCM/modchip payload, such as Nyx; Hekate's touch-enabled GUI. If you start Hekate without these files on your microSD, Hekate's functionality will be severely limited.</p> <p>Q: How often should I check for updates to Hekate, and what benefits do newer releases bring to the process?   A: Nintendo Homebrew's #announcements channel will automatically poll for updates to Atmosph\u00e8re and Hekate, letting you know when updates are available for them. In general, you'll want to look for updates whenever a major Switch system update is launched, as major updates will stop Horizon from booting until Hekate and Atmosph\u00e8re are updated accordingly.</p> <p>Q: Does this process have any effect on the Switch's system or data?   A: No, nothing in the guide has had any permanent effect on the Switch so far.</p>"},{"location":"user_guide/rcm/","title":"RCM","text":""},{"location":"user_guide/rcm/#about-rcm","title":"About RCM","text":"<p>RCM (short for ReCovery Mode) is a pre-boot mode for Tegra processors that allows NVIDIA and Nintendo to send the Switch tiny programs for various internal uses. On unpatched consoles, once a payload was sent,  then quickly copied into the memory buffer behind the stack, it overflowed the memory buffer into the stack. This leads to a  \"smashed stack\" and unsigned code execution within a bootROM context, giving us access to nearly everything on the console. We use it here to launch Atmosph\u00e8re.</p> <p>Before setting up for homebrew, install at least one eShop title to utilize \"title takeover\", an Atmosph\u00e8re feature that allows homebrew to use more resources than they would normally have. Try downloading a free game (such as Fallout Shelter), application (such as YouTube), or a game demo (such as 10 Second Run RETURNS). Running the Homebrew Menu via a game cartridge will also work, but it must be inserted every time you want to boot into homebrew. Title takeover does not permanently replace or remove the donor game/application, nor does it become tied to it specifically. Any installation or cartridge used for title takeover can always be used normally if you don't hold any buttons when booting that title.  Once you obtain any bootable title, you are prepared to continue on with the guide.</p> <p>If you choose the emuMMC path introduced later in the guide, it'll be important to disable the Automatic Save Data Cloud function beforehand, as well as making sure the Switch is set as the primary console. </p> <p>Continue to Entering RCM </p> Frequently Asked Questions about this page <ul> <li> <p>Q: How does the RCM exploit work on unpatched Nintendo Switch consoles?    A: For more information, please reference this link. There is also a Medium article about it here.</p> </li> <li> <p>Q: Does RCM work on patched consoles?    A: Yes. RCM is an intended mode for all Switch consoles. The exploit is the unintended effect that only some consoles can use. Consoles with the Tegra X1+ have a completely new bootROM with no evidence of the exploit, while \"patched\" V1 systems have an IROM patch to the bootROM applied that effectively removes fusee-gelee as well.</p> </li> </ul>"},{"location":"user_guide/rcm/entering_rcm/","title":"Entering RCM","text":"<p>The Switch's Tegra X1 processor has a recovery mode referred to shorthand as RCM, intended to be useless for end-users. Fortunately, due to the fusee-gelee vulnerability, this special mode acts as our gateway into CFW.</p> <p>Methods to enter RCM can require nothing more than household items (not recommended) to affordable tools ($5-10) available on platforms like AliExpress and Amazon. Avoid the \"metal bridge\" or \"paperclip method\" as it can damage your console. You can also consider 3D printing necessary tools.</p> <p>Patched Switch</p> <p>Note that patched units can enter RCM, but it is not possible to send a payload on those systems. Also note that RCM is a different recovery mode than the one accessed by holding Volume Up, Volume Down and powering on your console.</p> <p>Information about the methods below</p> <p>The order of methods on this page is in the order of ease. The easiest to immediately accomplish are listed at the top, and the most advanced/difficult methods are at the bottom and should not be attempted by most people. USING A PAPERCLIP OR TIN FOIL CAN/WILL DAMAGE YOUR CONSOLE, DO NOT DO THIS!</p>"},{"location":"user_guide/rcm/entering_rcm/#instructions","title":"Instructions:","text":"<ol> <li>Power off the Switch and short the pins on the Joy-Con rail using one of the methods listed below.</li> <li>While holding <code>Volume Up</code>, press <code>Power</code>.<ul> <li>If your Switch displays the Nintendo logo and boots normally (or the screen was on and goes black), you didn't successfully enter RCM and should try again. Otherwise, if your console still has a black screen (even after tapping the power button again), your Switch is in RCM.</li> </ul> </li> <li>Once your Switch is in RCM, remove the RCM jig (if applicable) and continue with the next page of the guide by clicking on the button at the bottom of this page.</li> </ol> RCM Jig (Recommended for beginners)Soldered Joy-Con Pads - Physical RCM Button (Safest but not recommended for beginners)Soldered Joy-Con Pads - 7 &amp; 10Soldered Joy-Con Pads - 9 &amp; 10Bent Joy-Con Pins (Not recommended) <p>Some jig designs use paperclips, inheriting the same risks as the \"metal bridge\" / \"paperclip method\" and should not be done.</p> <p>Once you have successfully entered RCM, you can take the jig out of the Joy-Con rail.</p> <p>This method is similar to the \"metal bridge\" / \"paperclip method\", but is more reliable and safer in many cases. Jigs hold a wire in place so the correct pins (10 and a ground) are reliably shorted.</p> <p>The RCM jig pictured below is the model we recommend.</p> <p></p> <p>If you plan to make your own jig, this image lays out the pad layout on the console. Make sure your jig NEVER touches pin 4. Pin 4 provides 5 volts of power to the Joy-Con, and can permanently damage the rail or console if shorted.</p> <p></p> <p></p> <p>This method requires opening your right Joy-Con, voiding its warranty. Not for the faint of heart.</p> <p>This method comes to us from the mind of @<code>pbanj</code> on Discord. All pictures of this method in action were provided by him, with some supplementary images provided by @<code>eip618</code> on Discord.</p> <p>The goal of this method is to open the right Joy-Con to the point that you can reach the contact pads easily. This is similar to the previous method, however you will be soldering wires to pins 7 and 10 (shown below) and wiring them to the \"rail release button\" at the top back of the right Joy-Con.</p> <p></p> <p>In order to start this method you will want to take two lengths of wire, and wrap one end of each into a small circle.</p> <p></p> <p>You will then want to take the circular end of one of the wires and add a small amount of solder, keeping it mostly flat (ONLY DO THIS TO ONE OF THE WIRES!). You will then glue this wire down to the below point on the rail release button. Make sure glue doesn't cover the top of the solder/wire as it will act as a contact point. Also, ensure that you leave enough space for the button to function correctly. Try pushing the button from the outside and observing its travel path so that you can see where and how you should safely glue the solder glob.</p> <p></p> <p></p> <p>The first wire should now be in place as seen by the green circle below. The second wire does not need any solder, instead you will hold it in place using the screw as shown by the red circle in the picture below.</p> <p></p> <p>Pressing the Joycon button in you should now notice the solder point you created making contact with the piece of metal held in by the screw. Once you have these elements in place you want to connect one wire to pad 7 and the other to pad 10 (it doesn't matter which is which). After that you have successfully created an RCM button on your Joycon. You will now need to hold down the Joycon release button when attempting to boot RCM.</p> <p></p> <p>This method requires opening your right Joy-Con, voiding its warranty. Not for the faint of heart.</p> <p>The goal of this method is to open the right handed Joy-Con to the point that you can reach the contact pads easily. This is similar to the previous method, however the goal is to solder pins 7 and 10 (shown below) together with a surface-mount 0805 10k resistor. Apart from using a physical switch/button, this is currently considered the safest method that involves soldering to pads.</p> <p></p> <p>Here is an example from @stuck_pixel on the ReSwitched Discord server.</p> <p></p> <p>This method will result in the right Joy-Con being seen as \"detached\" while physically connected to the Switch, so it will not be able to charge. This method may result in the Joy-Con being permanently detected as wireless if you update the Joy-Con firmware while this mod is installed. In the latter case, fixing this requires opening up the Joy-Con and reseating the battery. It is recommended to solder pads 7 and 10 together with a resistor instead.</p> <p>This method requires opening your right Joy-Con, voiding its warranty. Not for the faint of heart.</p> <p>The goal of this method is to open the right Joy-Con to the point that you can reach the contact pads easily. This is similar to the previous method, however the goal is to solder pads 9 and 10 (seen below) together. This can either be done using a small wire, or directly bridging the pads with solder.</p> <p></p> <p>Here is an example from @yami0666 on our Discord server.</p> <p></p> <p>This method will result in the right Joy-Con being detected as in wireless mode while attached to the Switch, and this method may result in the Joy-Con being permanently detected as wireless if you update the Joy-Con firmware while this mod is installed. In the latter case, fixing this requires opening up the Joy-Con and reseating the battery.</p> <p>This method requires opening your right Joy-Con, voiding its warranty. Not for the faint of heart.</p> <p>The goal of this method is to open the right handed Joy-Con to the point that you can reach the contact pads easily, and use a thin object such as a knife to gently bend pin 9 and 10 (shown below) slightly up and towards each other so they touch, shorting them.</p> <p></p> <p>Here is an example from @sonlen on our Discord server.</p> <p></p> <p>Continue to Sending a Payload </p>"},{"location":"user_guide/rcm/sending_payload/","title":"Sending a Payload","text":"<p>If you are here to test if your Switch is patched</p> <p>Make sure you have put your device into RCM and downloaded Hekate. Once finished, if your console is not patched, continue with the \"Preparing Hekate\" section at the bottom of the page.</p> <p>Now that the device is in RCM, we will need to send it a payload. The methods are mostly the same but slightly differ depending on what hardware you have available.</p> <p> </p> WindowsMac / LinuxAndroidChromebook <p>If nothing happens after you send the payload</p> <p>If your console's screen remains black after you've sent Hekate (or any other payload), it's possible your payload was corrupted, or that your console is patched.   If your payload injector program shows         that zero or 0x0000 bytes were sent, then it is patched. This isn't a one-time glitch or up for debate; it is patched. Consider an alternate method that isn't via RCM.</p>"},{"location":"user_guide/rcm/sending_payload/#what-you-need","title":"What you need","text":"<ul> <li>The latest release of TegraRcmGUI (either the MSI or zip)</li> <li>A USB-A to USB-C cable (or a standard USB-C cable if your computer natively supports USB-C)</li> <li>The latest release of Hekate. The Hekate payload (<code>hekate_ctcaer_(version).bin</code>) is located in the <code>hekate_ctcaer_(version).zip</code>.</li> </ul>"},{"location":"user_guide/rcm/sending_payload/#instructions","title":"Instructions","text":"<ol> <li>Install and run TegraRcmGUI.</li> <li>Navigate to the <code>Settings</code> tab, then press <code>Install Driver</code> and follow the on-screen instructions.<ul> <li>If you face issues when installing the driver, follow the driver installation with Zadig section below.</li> </ul> </li> <li>Connect your Switch in RCM to your PC using the USB cable.</li> <li>Navigate to the <code>Payload</code> tab of TegraRcmGUI.<ul> <li>Your Switch should be shown as detected in the bottom left corner.</li> </ul> </li> <li>Press the file button next to <code>Inject payload</code>, and navigate to and select the <code>hekate_ctcaer_X.X.X.bin</code> file.</li> <li>Click <code>Inject payload</code> to launch the payload you selected.</li> </ol>"},{"location":"user_guide/rcm/sending_payload/#driver-installation-with-zadig","title":"Driver installation with Zadig","text":"<p>Follow these steps if you face issues when installing the driver with TegraRcmGUI. You will need the latest version of Zadig.</p> <ol> <li>Launch Zadig. In the <code>Options</code> menu, be sure that <code>List All Devices</code> is enabled.</li> <li>Connect your Switch in RCM to your PC using the USB cable.</li> <li>In Zadig, select \"APX\" in the device list.</li> <li>Select <code>libusbK (v3.1.0.0)</code> in the driver list.</li> <li>Click <code>Install Driver</code> and wait for the installation to finish.</li> </ol>"},{"location":"user_guide/rcm/sending_payload/#what-you-need_1","title":"What you need","text":"<ul> <li>The latest release of fusee-interfacee-tk (also avaliable on the AUR)<ul> <li>If you use Arch Linux or a derivative distro, the AUR package is recommended.</li> </ul> </li> <li>A USB-A to USB-C cable (or a standard USB-C cable if your computer natively supports USB-C)</li> <li>The latest release of Hekate. The Hekate payload (<code>hekate_ctcaer_(version).bin</code>) is located in the <code>hekate_ctcaer_(version).zip</code>.</li> </ul>"},{"location":"user_guide/rcm/sending_payload/#instructions_1","title":"Instructions","text":"<ol> <li>Download and run the payload injector (if you're on Linux, you will need to run this program as root, use <code>sudo</code>, or follow the instructions at Linux injection without root).</li> <li>Connect your Switch in RCM to your PC using the USB cable.</li> <li>Wait for your Switch to be shown as found in the injector.</li> <li>Press <code>Select Payload</code>, and navigate to and select the <code>hekate_ctcaer_X.X.X.bin</code> file.</li> <li>Click <code>Send Payload!</code> to launch the payload you selected.</li> </ol>"},{"location":"user_guide/rcm/sending_payload/#what-you-need_2","title":"What you need","text":"<ul> <li>The latest release of Rekado</li> <li>You will need to enable Unknown Sources in your device settings to install this</li> <li>A USB-C cable</li> <li>If your device has a USB-C port, you may use a C-C cable</li> <li>If your device only has a Micro USB port, you will need a USB OTG adapter and a USB A-C cable</li> <li>This will not work on every phone!</li> <li>The latest release of Hekate. The Hekate payload (<code>hekate_ctcaer_(version).bin</code>) is located in the <code>hekate_ctcaer_(version).zip</code>.</li> </ul>"},{"location":"user_guide/rcm/sending_payload/#instructions_2","title":"Instructions","text":"<ol> <li>Copy the hekate_ctcaer <code>.bin</code> file from the Hekate <code>.zip</code> file to a location on your phone.<ul> <li>A tool such as Amaze File Manager can do this.</li> </ul> </li> <li>Launch Rekado on your phone.</li> <li>Navigate to <code>Payloads</code> (Signified by a downwards arrow with a line), then press the <code>+</code> button at the bottom right.</li> <li>Navigate to your hekate_ctcaer <code>.bin</code> file and tap it to add it to Rekado's menu.</li> <li>Optional, but recommended: Navigate to Rekado's settings in the top right and enable <code>Hide bundled</code>.</li> <li>Connect your Switch in RCM to your phone using the USB cable.</li> <li>If prompted, grant Rekado access to the Switch.</li> <li>Select the <code>hekate_ctcaer_X.X.X.bin</code> file in the dialog that pops up.</li> </ol>"},{"location":"user_guide/rcm/sending_payload/#what-you-need_3","title":"What you need","text":"<ul> <li>A USB-A to USB-C cable</li> </ul> <p>About USB-C</p> <p>If your Chromebook has a USB-C port, do note that this will not work using a C-C cable.</p> <ul> <li>The latest release of Hekate. The Hekate payload (<code>hekate_ctcaer_(version).bin</code>) is located in the <code>hekate_ctcaer_(version).zip</code>.</li> </ul>"},{"location":"user_guide/rcm/sending_payload/#instructions_3","title":"Instructions","text":"<ol> <li>Go to the injection website and scroll all the way down</li> <li>Select the \"Upload Payload\" option and upload the <code>hekate_ctcaer_X.X.X.bin</code> file from the Hekate <code>.zip</code> file.</li> <li>Connect your Switch in RCM to your Chromebook using the USB cable.</li> <li>Select \"Do the thing\". A pop-up will appear. Click the <code>APX</code> option.</li> <li>Press the Connect button and the payload will be injected.</li> </ol>"},{"location":"user_guide/rcm/sending_payload/#preparing-hekate","title":"Preparing Hekate","text":"<p>We will prepare the microSD card for formatting/partitioning before going to the next page. Removing the microSD card while in Hekate is safe so turning off the console is not necessary and keeping it on will save time that would be spent reinjecting the payload.</p>"},{"location":"user_guide/rcm/sending_payload/#what-you-need_4","title":"What You Need:","text":"<ul> <li>The latest release of Hekate.</li> <li>Your microSD card</li> </ul>"},{"location":"user_guide/rcm/sending_payload/#instructions_4","title":"Instructions:","text":"<ol> <li>Without turning your Switch off, remove the microSD card from the Switch.</li> <li>Insert your Switch's microSD card into your computer.</li> <li>Extract the Hekate <code>.zip</code> to a location on your computer</li> <li>Inside the extracted Hekate folder you will find a folder named <code>bootloader</code>.</li> <li>Copy the <code>bootloader</code> folder to the root of your microSD card.</li> <li>Copy the <code>Nintendo</code> folder from the root of your microSD to a safe space on your device.</li> <li>Put your microSD card back into your Switch.</li> <li>Use volume up and volume down to navigate the Hekate menu. Hover over 'reload' and hit power. Your screen should now have the Hekate GUI.</li> </ol> <p>Continue to choosing your CFW environment </p>"}]}