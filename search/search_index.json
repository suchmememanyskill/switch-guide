{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#nh-switch-guide","title":"NH Switch Guide","text":"<p>A guide collaboration between Nintendo Homebrew's Helpers and Staff, from stock to Atmosphere.</p> <p> </p> <p>Discord Help</p> <p>For live support with this guide please visit us in #switch-assistance over at the Nintendo Homebrew Discord.</p>"},{"location":"#what-is-homebrew","title":"What is homebrew?","text":"<p>Homebrew is a term for unoffical software written by hobbyists and amateur developers for locked down systems (i.e. the Switch).</p> <p>This can include save editing tools, games, emulators, and more.</p> <p>Homebrew can be run for free on your Switch through Custom Firmware as long as you have a \"first-generation\" system, and a USB-C cable.</p>"},{"location":"#what-is-custom-firmware","title":"What is Custom Firmware?","text":"<p>Custom Firmware (\u201cCFW\u201d) is a piece of software that modifies the system firmware. Atmosphere, for example, does this by running in the background and patching the OS on the fly.</p> <p>This allows one to extend the functionality of their system by giving homebrew higher levels of permission than most userland exploits and can be used to provide extra features for homebrew devs and users to take advantage of for various purposes, for instance, game modding using LayeredFS.</p> <p>CFW can be set up on any first-generation console on any version (but will require additional tools).</p>"},{"location":"#what-does-this-guide-install","title":"What does this guide install?","text":"<p>This guide has the end goal of taking a completely unmodified Switch from Stock Firmware to Atmosphere Custom Firmware.</p> <p>fusee-gelee is currently the best method of launching Custom Firmware that gives us nearly full control of the system. It utilizes a vulnerability in the bootROM of the first-generation Switch systems, allowing us to send any payload we want to the Switch's recovery mode, instead of only ones that Nintendo have authorized.</p>"},{"location":"#what-can-i-do-with-custom-firmware","title":"What can I do with Custom Firmware?","text":"<ul> <li>Customize your HOME Menu with user-created themes and splash screens</li> <li>Use \u201cROM hacks\u201d for games that you own</li> <li>Backup, edit, and restore saves for many games</li> <li>Play games for older systems with various emulators, using RetroArch or other standalone emulators</li> <li>Safely update to the latest system version without fear of losing access to homebrew</li> </ul>"},{"location":"#what-do-i-need-to-know-before-starting","title":"What do I need to know before starting?","text":"<p>Before beginning the guide, you must know the risks of Switch hacking: EVERY time you modify your system, there is always the potential for an UNRECOVERABLE brick. They\u2019re rare but still a possibility so make sure you follow ALL directions EXACTLY.</p> <p>This guide will work on first-generation Switch consoles in all regions on any firmware version.</p> <p>You will need one of the following in order to successfully follow this guide:</p> <ul> <li>A PC and a USB cable capable of data transfer between your Switch and your PC</li> <li>An Android device and a USB cable capable of data transfer between your Switch and your Android device<ul> <li>This does not work on every android phone</li> </ul> </li> <li>A Lightning-OTG adapter, a jailbroken iOS device and a USB cable capable of data transfer between your Switch and the adapter<ul> <li>This method is not covered by the guide, but you can read more about it at this website</li> </ul> </li> </ul> <p>You will also need a micro SD card that is at least 64 gigabytes or larger if you plan on following this guide through the emummc path, which is safer and strongly recommended. If you must use a smaller SD card, it is possible with the sysmmc path, but strongly not recommended.</p> <p>Finally, you will need a way to access Recovery Mode. (This will be further explained in the \"Entering RCM section\")</p> <p>If everything goes according to plan, you will lose no data and end up with everything that you started with (games, Nintendo Account, saves, etc will be preserved).</p> <p>Keep your device plugged in and charged throughout the entire process to avoid data loss or damage from an unexpected power-off.</p> <p>Custom Firmware is not permanent with current methods, and will be unloaded upon rebooting the system.</p> <p>It is advised that you read the entire guide from start to finish one or more times before actually running through the guide with your system.</p> <p> </p>"},{"location":"#continue-to-getting-started","title":"Continue to Getting Started","text":"<p>Note: We are not now, nor have we ever been, nor will we ever be, associated with Anton Retro, sthetix, or any other YouTube/TikTok video guide makers.</p> <p>Furthermore, we resent any implication to the contrary.</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#about-this-guide","title":"About this guide","text":"<p>This guide was written by staff members of the Nintendo Homebrew Discord Server </p> <p> </p> <p>Credits</p> <p>Flump, jerbear64, Phoenix, xGhostBoyx, Such Meme Many Skill, PhazonicRidley, emmo, dennthecafebabe, Dax, and oreo639.</p> <p>Thank you to everyone else that contributed to the guide on GitHub, but special thanks to noirscape.</p> <p>You can find this guide on GitHub, It is licensed under the ISC license.</p> <p>Developer / Tool credits</p> <ul> <li>Atmosphere-NX for Atmosphere.</li> <li>switchbrew for nx-hbloader and nx-hbmenu.</li> <li>nwert and CTCaer for Hekate.</li> <li>WerWolv for EdiZon.</li> <li>J-D-K for JKSV.</li> <li>Flagbrew for Checkpoint.</li> <li>mtheall for FTPD.</li> <li>joel16 for NX-Shell.</li> <li>Cease &amp; DeSwitch for fusee-gelee.</li> <li>MenosGrante for Rekado.</li> <li>eliboa for TegraRcmGUI.</li> <li>vgmoose, pwsincd, rw-r-r_0644 and crc32 for hb-appstore.</li> <li>Essometer for collecting patched Switch serials.</li> <li>shchmue for Lockpick_RCM.</li> <li>Ave for 90DNS.</li> <li>Nexrem (meganukebmp) for the Switch 90DNS Tester.</li> <li>exelix11 for Switch Theme Injector.</li> <li>suchmememanyskill for TegraExplorer</li> </ul> <p></p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#what-firmware-versions-are-currently-hackable","title":"What firmware versions are currently hackable?","text":"<p>Currently two hardware revisions of the Switch exist. Any Switch bought or manufactured before the middle of 2018 has a bootrom bug that allows us to run code regardless of the firmware version on the Switch. When Nintendo updates the system, however, CFW will usually need an update to account for it.  This bug cannot be fixed by Nintendo once the console leaves the factory, unless the console is sent in for repairs. This means that all current and future firmwares will be able to launch CFW through this exploit on the old hardware revision.</p> <p>Any console purchased after approximately August 2018 is likely to be patched. This includes the latest units on shelves, referred to as 'red box' or 'Mariko'. Mariko is hardware patched, but may come on a vulnerable firmware. Currently the only way to know if your Switch is hackable is by trying to send the payload in RCM. Even with this exploit fixed, many Switches on 8.0.1 and below will be hackable to some degree in the future (see Should I update my Firmware? for much more detailed information). The serial number on the back of the box can possibly tell you which consoles are patched and which aren't.  See here for an up to date list.</p>"},{"location":"faq/#how-do-i-use-the-exploit-how-can-i-boot-into-rcm","title":"How do I use the exploit? How can I boot into RCM?","text":"<p>To launch CFW through the exploit, the Switch needs to be in \"Recovery Mode\"(RCM).  The easiest way to enter RCM is by grounding pin 10 in the right joycon rail and holding VOL+ on boot.  Several methods and designs to do this exist, see our guide for more information.  Once the Switch is in RCM it needs to be connected to either a computer, phone or dongle to send the exploit and the payload.</p> <p>This procedure needs to happen every time the Switch boots from a completely \"off\" state, otherwise the Switch will boot into the stock firmware.</p>"},{"location":"faq/#what-makes-a-good-jig-good-can-i-use-a-paperclip","title":"What makes a good jig good? Can I use a paperclip?","text":"<p>Most people prefer to use 3d-printed jigs to enter RCM.  These jigs are made in a way that they slide into the right joycon rail and have a piece of connected wire that then bridges pin 10 and one of the grounded pins on the Switch.  A lot of different designs for these jigs exist, but it is important to understand, that these jigs can damage the Switch if they are made in a bad way.</p> <p>Since the wire in the jig is supposed to touch the pads inside the Switch's joycon rail, it is important to use wire that is thin, not rigid and bent/not pointy.  Paperclips make for potentially dangerous jigs, as they are made out of a hard material, are rigid and pointy and can easily scratch off the pads inside the Switch. A good jig uses 32Gauge(0.2mm diameter) wire and is bent in a way that the end of the wire does not scratch the pads. You can download and 3d-print your own jig and use the pictures on this website to guide you on how to bend the wire correctly. Premade jigs can be found on online marketplaces for cheap.</p>"},{"location":"faq/#is-there-an-easier-way-to-enter-rcm","title":"Is there an easier way to enter RCM?","text":"<p>To enter RCM more comfortably a solution called \"AutoRCM\" exists.  Once set up, this method will always boot the Switch into RCM, even without a jig or holding any buttons.  This works by \"bricking\" the Switch in a controlled manner.  The Switch detects that something is wrong and boots into RCM to get repaired.  The big downside of this method is, that it is impossible to boot the Switch without a computer, phone or dongle, as it will never boot into stock firmware by itself, and that it requires an SD card with the proper CFW files on it at all times. In addition, if the battery of the Switch is completely drained, the Switch will need to charge to at least 10% in Hekate before launching Atmosphere, otherwise the Switch will refuse to boot due to the low battery. Charging in RCM is not recommended as this is very slow. AutoRCM can be reversed, but it is advised to keep a working NAND and BOOT0/1 backup before using it.</p> <p>Many Android-phones are able to send the exploit to the Switch, making them a perfect portable way to launch CFW. Different designs for portable dongles exist, ranging from Raspberry Pi Zero and Arduino projects to internal dongles, that work completely autonomous. The latter should only be done by advanced users, as it requires soldering onto the Switch mainboard itself.</p>"},{"location":"faq/#should-i-update-my-firmware","title":"Should I update my Firmware?","text":"<p>If your Switch is one of the new hardware revisions that patched the exploit in RCM and you are on firmware 7.0.1 or lower, you should not update if you want to have CFW in the forseeable future.</p> <p>If your Switch is one of the older hardware revisions and you don't mind having to use jigs/hardmods/AutoRCM and sending the exploit via computer, phone or dongle everytime you want to launch into CFW then it is completely safe to update.  If you want the chance to maybe, one day, not have to use a external device, then it is recommended to stay on a FW as low as possible.  Beware that this means that you potentially need to wait for a very long time (months to years) for this to happen, if ever. Private exploits to launch CFW over the Browser are known to exist for firmwares up to 7.0.1.</p> <p>Downgrading on the Switch is possible, but it requires using AutoRCM and a custom bootloader payload to bypass the Switch's several hardware anti-downgrade mechanisms.  This will not work on an unpatched system, and is practically useless for most users. On every boot the Switch firmware checks how many e-fuses have been burned and how many e-fuses the Switch expects to be burned.  Major updates to the Switch, or updates in which a large vulnerability has been patched, irreversibly burn one of the Switch's 64 \"e-fuses\".  If the Switch ever detects that more e-fuses have been burned than expected (meaning a downgrade happened), it will refuse to boot. Replacing e-fuses is not an option. You can find more information about fuses here Atmosphere is maintained to support the latest firmware updates on unpatched units. The situation for patched and new units is as follows:</p> <ul> <li> <p>\"Old\" Patched Switch (HAC-001): Do NOT update past 7.0.1. Units on 7.0.1 and below will eventually get CFW. Patched units that have upgraded to 8.0.0 or 8.0.1 will likely get homebrew.</p> </li> <li> <p>\"New\" Switch (HAC-001-01): Do NOT update past 8.0.1. Units on 8.0.1 and below will likely get homebrew. Units on 8.1.0 and higher are not expected to be hacked and can be updated.</p> </li> <li> <p>Switch Lite (HDH-001): Do NOT update past 8.0.1. Units on 8.0.1 and below will likely get homebrew. Units on 8.1.0 and higher are not expected to be hacked and can be updated.</p> </li> </ul> <p>A method to update without burning e-fuses exists, but, like downgrading, it forces you to use AutoRCM and sending the exploit via USB every time, as booting into the stock firmware even once would instantly burn the e-fuse. Note that other anti-downgrade mechanisms exist, making it for example impossible to boot game carts on a firmware below 4.1/9.0.0 if the Switch has ever launched a game on firmware 4.1+/9.0.0+. This can only be worked around by completely disabling the game cart slot while on 4.1/9.0.0 or greater, which is similarly impractical for most users.</p>"},{"location":"faq/#is-it-safe-to-use-homebrew-will-i-get-banned","title":"Is it safe to use homebrew? Will I get banned?","text":"<p>The Switch comes with a lot of telemetry, and has been called a \"telemetry monster\" by several prominent developers.  As long as the Switch is connected to the internet, Nintendo gets a report about a lot of different actions and states and has the option to log or act on them.  Even if the Switch is offline and connects to the internet at a later point, Nintendo still recieves information about what happened while the Switch was disconnected.</p> <p>To disable some of this telemetry, it is advised to disable the sending of error reports in the System Settings of the Switch.  Additionally if you live in the EU you can set the \"do not share\" option on Nintendo's website to prevent your Switch from sending a lot of telemetry, although the effectiveness of this is questionable.</p> <p>Nintendo still receives a lot of information, even with those options disabled.  We also cannot know if Nintendo decides to look for something in the logs and ban people in retrospect.  They have also shown to expand their telemetry options with every other firmware update.</p> <p>Currently all bans have been for very obvious and intrusive actions, specifically:</p> <ul> <li>Developers using their unique Switch data to poke and reverse-engineer Nintendos Server responses</li> <li>People pirating games and using them online</li> <li>People changing their profile pictures to custom pictures</li> <li>People using savegame editors to unlock content that is not available yet and using it online (Splatoon 2)</li> <li>People cheating online in general (Modifying Cart stats in MK8)</li> <li>People installing homebrew NSP files, which Nintendo can pick up on with their telemetry</li> </ul> <p>Atmosphere stops some, but not all of Nintendo's telemetry, and prevents crash reports from being sent. This means Nintendo can't tell if anything, including homebrew or modded games crashed, and Atmosphere dumps the crash log to the SD card to help homebrew developers. However, Nintendo still receives information about what is being played, and general system report information.</p> <p>Atmosphere is not a silver bullet, and this does not mean that Nintendo won't decide to ban people for harmless homebrew in the future. If you are scared to get banned then don't use homebrew for now. Atmosphere now supports emuMMC (emuNAND): a copy of Switch system software, run entirely from the SD card instead.  This erases ban risks due to the fact that emuMMC is run in a quarantined, offline state, not touching the internal memory. You are still able to boot into original firmware to play online.</p> <p>For patched units reliant on deja-vu, sysNAND will always have to be on a firmware below 4.1. For switches from 5.0 to 7.0.1 deja-vu isn't quite out yet but is coming soon. (Also please note that firmwares 8.0.0+ will never work with deja-vu) You can use an updated emuMMC dedicated to online/clean play, while your sysNAND is used offline for custom firmware.</p> <p>We do not recommend the use of ReiNX or SX OS for many reasons, primary among them that they use lots of assets from Atmosphere and offer no real benefit that Atmosphere does not offer anyway. We also do not recommend Kosmos, as its large amount of extras on top of regular Atmosphere make it difficult to troubleshoot strange issues. All of these alternative CFWs also tend to use non-conventional setups which can cause issues that make it difficult to troubleshoot, which is another reason we prefer using Atmosphere. Additionally, it is advised to use 90DNS which blocks connections to any Nintendo servers. If you use an emuNAND for CFW and keep your sysNAND clean for playing online, you should use 90DNS on your emuNAND. Note: Keeping your emuNAND \"dirty\" and your sysNAND \"clean\" pertains primarily to those using the RCM exploit. Users employing Nereba or Caffeine will do the opposite.</p>"},{"location":"faq/#what-formats-can-homebrew-come-in","title":"What formats can homebrew come in","text":"<p>Homebrew can come in two different formats, namely in <code>nro</code> files and in <code>bin</code> files.</p> <ul> <li><code>nro</code> Files are placed in the <code>switch</code> folder on your SD card and can be launched using the Homebrew menu.</li> <li><code>bin</code> This format is used as a payload and is to be pushed in RCM using a payload launcher like tegrarcmgui on windows and fusee-interfacee-tk on other operating systems.</li> </ul> <p>Homebrew risks Be careful with launching downloaded homebrew! If you don't know the source, it's best not to launch it. Homebrew can potentially damage your system! Atmosphere provides protections against common bricking methods, but these are not guaranteed to always work!</p>"},{"location":"faq/#what-microsd-cardformat-should-i-use","title":"What microSD card/format should I use?","text":"<p>microSD cards that are 32GB or smaller can be used for homebrew, but are not recommended as these will not permit you to have a full NAND dump and/or an emuMMC on them.</p> <p>The recommended microSD card size is 128GB. This will permit you to make a full NAND dump as well as having enough space to run an emuNAND in the future while also having adequate space for homebrew.</p> <p>The recommended filesystem format is FAT32. While the Switch supports exFAT through an additional update from Nintendo, this filesystem is prone to corruption and as a result is not advisable.</p>"},{"location":"faq/#fake-microsd-cards","title":"Fake microSD cards","text":"<p>Do not buy microSD cards from sites like eBay.  These microSD cards are often fake and do not have the advertised amount of storage and will result in data corruption if used.  Amazon has had some problems with fake SD cards, so we recommend buying them at a physical store. Even on trustworthy sites, always, always check reviews on a product before buying!!</p> <p>If you suspect your microSD card is fake or damaged, see the instructions here to verify the integrity of your SD card.</p>"},{"location":"faq/#my-homebrew-is-not-showing-up-on-the-menu","title":"My homebrew is not showing up on the menu","text":"<p>This is an issue primarily affecting macOS users, but may occur on other devices as well. If you are able to launch the homebrew menu, but you are not seeing some or any of your homebrew, you will need to unset the archive bit with Hekate.</p> <ol> <li>Send the Hekate payload to your Switch by following these instructions: here</li> <li>Click on <code>Tools</code> on the top menu bar</li> <li>In the bottom left corner click on <code>Archive bit * AutoRCM</code></li> <li>Click on <code>Fix Archive bit</code> - this might take a while</li> <li>Press <code>Close</code> in the top right corner</li> <li>Press <code>Home</code> in the top menu bar to get back from where you started</li> <li>Follow the instructions at the Launching CFW page here to launch Atmosphere.</li> </ol>"},{"location":"extras/adding_udev/","title":"Linux - Run payload sender without root","text":"<p>This section details how to add an udev rule to let you send a payload to the Nintendo Switch without needing to use <code>sudo</code>.</p> <p>The following instructions only work if you have a system that implements <code>udev</code>. Most modern distros come with <code>systemd</code> already installed, which includes a <code>udev</code> implementation.</p> <p>Do the following instructions while your Switch is not connected to your computer.</p> <p> </p>"},{"location":"extras/adding_udev/#option-1-manually-adding-rules-and-group","title":"Option 1: Manually adding rules and group","text":"<p>The following instructions are not for beginners. Only do this if you understand what you are doing.</p>"},{"location":"extras/adding_udev/#creating-a-new-group","title":"Creating a new group","text":"<p>To start, we will create a new group and add ourselves to it. The group the Nintendo Switch device will be owned by on Linux will be set to this group.</p> <ol> <li>Open a terminal.</li> <li>Enter the following command: <code>sudo groupadd nintendo_switch</code>.</li> <li>Enter your password when prompted.</li> <li>Enter the following command: <code>sudo usermod -a -G nintendo_switch $USER</code>. Make sure that the <code>G</code> is capitalized!</li> <li>Close the terminal.</li> </ol>"},{"location":"extras/adding_udev/#adding-a-udev-rule","title":"Adding a udev rule","text":"<p>Next we're gonna add a new udev rule. udev is a device manager for the linux kernel. The rule we're gonna specify is that if the Switch is connected in RCM mode, the group the Switch belongs to will be the group we made in the previous section.</p> <ol> <li>Open a terminal.</li> <li>Change to the root user with the following command: <code>sudo su</code>. Enter your password when prompted.</li> <li>Enter the following command: <code>mkdir -p /etc/udev/rules.d</code>.</li> <li>Enter the following command: <code>echo 'SUBSYSTEMS==\"usb\", ATTRS{manufacturer}==\"NVIDIA Corp.\", ATTRS{product}==\"APX\", GROUP=\"nintendo_switch\"' &gt; /etc/udev/rules.d/10-switch.rules</code>.</li> <li>Enter the following command: <code>udevadm control --reload</code>.</li> <li>Enter the following command: <code>udevadm trigger</code>.</li> <li>Logout and log back in.</li> </ol> <p>You should now be able to run the payload sender without having to use <code>sudo</code>.</p> <p> </p>"},{"location":"extras/adding_udev/#option-2-installing-a-package-with-the-rules","title":"Option 2: Installing a package with the rules","text":"<p>Note:</p> <p>These rules will actually allow ANY user to access your switch via USB, not only your user.</p> <p>You may just follow the instructions at nx-udev, or if you're on Ubuntu / Debian:</p> <ol> <li>Download nx-udev_latest_all.deb.</li> <li>Open a terminal in the same directory as your download.</li> <li>Run <code>sudo dpkg -i nx-udev_latest_all.deb</code> to install the package</li> </ol> <p>You should now be able to run the payload injector and homebrew with USB communication without having to use <code>sudo</code>.</p>"},{"location":"extras/alternate_bootsetups/","title":"Alternate boot setups","text":"<p>If you need to troubleshoot something, or need to try a different boot setup, read on.</p> <p>Do I need any of these?</p> <p>Unless you are experiencing problems with booting or Atmosphere itself, it's strongly recommended to use the main guide instead of these. They are provided for the sake of completeness.</p> <p> </p>"},{"location":"extras/alternate_bootsetups/#chainloading-fusee-from-hekate","title":"Chainloading Fusee from Hekate","text":"<p>What you need</p> <ul> <li>The latest release of Hekate</li> <li>The latest release of Atmosphere <ul> <li>You will need to download both the release zip and the <code>fusee.bin</code></li> </ul> </li> <li>hekate_ipl.ini</li> </ul>"},{"location":"extras/alternate_bootsetups/#instructions","title":"Instructions","text":"<ol> <li>Insert your Switch's SD card into your PC</li> <li>Copy the contents of the Atmosphere <code>.zip</code> file to the root of your SD card</li> <li>Copy <code>fusee.bin</code> to the atmosphere folder on your SD card</li> <li>Copy the <code>bootloader</code> folder from the Hekate <code>.zip</code> file to the root of your SD card</li> <li>Copy <code>hekate_ipl.ini</code> to the <code>bootloader</code> folder on your SD card</li> <li>Setup is complete, now you can boot CFW by injecting the hekate_ctcaer <code>.bin</code> file from the Hekate zip</li> </ol>"},{"location":"extras/alternate_bootsetups/#using-fusee-without-hekate","title":"Using Fusee without Hekate","text":"<p>What you need</p> <ul> <li>The latest release of Atmosphere <ul> <li>You will need to download both the release zip and the <code>fusee.bin</code></li> </ul> </li> </ul>"},{"location":"extras/alternate_bootsetups/#instructions_1","title":"Instructions","text":"<ol> <li>Insert your Switch's SD card into your PC</li> <li>Copy the contents of the Atmosphere <code>.zip</code> file to the root of your SD card</li> <li>Setup is complete, now you can boot CFW by injecting <code>fusee.bin</code></li> </ol>"},{"location":"extras/autorcm/","title":"AutoRCM","text":""},{"location":"extras/autorcm/#autorcm","title":"AutoRCM","text":"<p>What is AutoRCM?</p> <p>AutoRCM causes the console to believe it is bricked, and will automatically launch RCM upon boot for recovery purposes, without needing a jig. As RCM is a recovery mode from repair specialists, this is an intended feature from the device developer, though is also considered a softbrick. If you aren't careful, misuse of AutoRCM can lead to real damage, especially with units that cannot inject custom RCM payloads (like Mariko hardware). Please take care when using it. Please keep in mind that the console can no longer boot on its own, so you'll need a PC, phone, or other payload injector to start the console after a coldboot.</p> <p>Note: If the console screen stays black when pressing the power button after activating AutoRCM, remember that it's not broken. It's in RCM.</p> <p>If you don't have a BOOT0/1 backup yet...</p> <p>You really want to kill your console, huh? If you haven't made a BOOT0/1 backup yet, it is recommended to make one right now.</p> <ol> <li>Boot Hekate</li> <li>Go to <code>Tools</code>, and select <code>Backup eMMC</code></li> <li>Then tap <code>eMMC BOOT0 &amp; BOOT1</code> and let the process complete.</li> </ol> <p>Disadvantages of AutoRCM</p> <p>There are some disadvantages you should consider before installing AutoRCM:</p> <ul> <li>Please keep in mind that the console can no longer boot on its own, so you'll need a PC, phone, or other payload injector to start the console after letting the console fully shut off. (AutoRCM by itself is considered a \"tethered jailbreak\").     Note: Sleep Mode is not considered \"powering off/on\" the console. Sleep Mode will still work as intended and is fully unchanged with AutoRCM.</li> <li>When completely discharged, your Switch will take a very long time to charge while in RCM. To solve this, charge the console for approximately twenty minutes before booting into Hekate and selecting a boot option. After it's done booting, the console will now charge at a normal speed with a battery icon in the corner.</li> <li>When a system update is completed while stock firmware is running, AutoRCM becomes disabled so you need to turn it on again. AutoRCM can be preserved by updating while CFW is active.</li> </ul> <p>Advantages of AutoRCM</p> <p>AutoRCM can be used for good as well:</p> <ul> <li>If you were having trouble getting into RCM before (i.e you were using the tinfoil method), now you can get into RCM without any hassle.</li> <li>If you want to keep fuses unburned, you can do so with AutoRCM, as the Switch never gets the chance to burn them. Nintendo's bootloaders burn the fuses, but those bootloaders cannot be used if AutoRCM is enabled.     Note: updating the console while booted into Hekate's \"stock\" configuration will clear AutoRCM on the next reboot. Please update while using custom firmware, or be sure to use a jig after the console reboots.</li> <li>It's easier to inject a payload using a payload injector, as using your jig and booting into RCM manually is no longer required.</li> </ul> <p>Other information...</p> <ul> <li>This method corrupts a single byte in both your BOOT0 and your BOOT1 partitions. This is why a backup of those is recommended.</li> </ul> <ul> <li>This software version of AutoRCM can almost always be reversed, so don't freak out if it doesn't work out the way you'd like it to.</li> </ul> <p>If, despite all of the warnings above, you still wish to install AutoRCM, and understand the risks, do the following:</p> <ol> <li>Boot Hekate</li> <li>Go to <code>Tools</code></li> <li>At the bottom of the page, tap <code>Arch Bit \u2022 AutoRCM \u2022 Touch \u2022 Pkg1/2</code></li> <li>Then tap <code>AutoRCM</code>. It will show a little <code>ON</code> next to the option once you have done this.</li> </ol>"},{"location":"extras/blocking_nintendo/","title":"Blocking Nintendo servers","text":"<p>This page will help you set up a method to block all communication with Nintendo. This will stop any updates and reporting to Nintendo, but it will prevent use of the eShop and online games.</p>"},{"location":"extras/blocking_nintendo/#instructions-ams-dns-redirection","title":"Instructions (AMS DNS redirection)","text":"<p>You can configure Atmosphere to automatically redirect any requests directed to Nintendo to nothing instead. Documentation about this feature can be found here. The section below will help you set up DNS redirection on your emummc. Note that this will only apply when you are using cfw.</p>"},{"location":"extras/blocking_nintendo/#what-you-need","title":"What you need:","text":"<ul> <li>emummc.txt</li> <li>Atmosphere 0.18.0 or higher</li> </ul>"},{"location":"extras/blocking_nintendo/#setup","title":"Setup:","text":"<ol> <li>Insert your SD into your pc</li> <li>Enter the Atmosphere folder</li> <li>If it doesn't exist already, create a folder named <code>hosts</code> in the atmosphere folder</li> <li>Copy the emummc.txt into the hosts folder<ul> <li>If you want to apply the DNS redirection to sysmmc instead of emummc, rename the file to <code>sysmmc.txt</code></li> </ul> </li> </ol> <p>Verify functionality</p> <p>You can verify the functionality of the DNS redirection by booting into emummc (or sysmmc if you applied the config to sys), and powering off after. </p> <p>A report will be generated in sd:/atmosphere/logs called <code>dns_mitm_startup.log</code>. If this starts with the following, the dns redirection is active</p> <p></p> <p> </p>"},{"location":"extras/blocking_nintendo/#instructions-90dns","title":"Instructions (90dns)","text":"<p>You can add a custom DNS to your WiFi connection that will block all communication with Nintendo's servers. We will be using 90DNS, a community-run custom DNS server. If you prefer, you can run your own DNS server following the instructions on the GitLab repository.</p> <p>Enter the console's System Settings, and then proceed to the Internet tab. From here:</p> Location Primary DNS Secondary DNS Europe (Server located in France) <code>163.172.141.219</code> <code>207.246.121.77</code> America (Server located in the USA) <code>207.246.121.77</code> <code>163.172.141.219</code> <p>Example for a 90dns connection with the Europe settings: </p> <p> </p>"},{"location":"extras/blocking_nintendo/#setting-up-a-new-connection-via-wifi","title":"Setting up a new connection via WiFi","text":"<p>Open WiFi networks without a password</p> <p>Not all WiFi networks require a password to connect. If your network does not use one, you can use the <code>Manual Setup</code> option, located at the very bottom of the <code>Internet Settings</code> screen below all other WiFi networks.</p> <ol> <li>Select your WiFi network from the list of networks.</li> <li>Enter an incorrect password that is 8 characters long and press <code>OK</code>.</li> <li>After a few moments of attempting to connect, the console will display a connection error.</li> <li>Press <code>OK</code> to close the error message.</li> <li>Press <code>Close</code> when it offers to display more details about the error.</li> <li>When asked if you want to re-enter the password, pick <code>View Settings</code>.</li> <li>Change <code>DNS Settings</code> to <code>Manual</code>.</li> <li>Pick the server that is the closest to your location out of the below chart and enter its <code>Primary</code> and <code>Secondary</code> DNS into your connection settings.</li> <li>Enter the correct password for your WiFi connection.</li> <li>Save the settings and test the connection.</li> </ol>"},{"location":"extras/blocking_nintendo/#editing-an-existing-wifi-connection","title":"Editing an existing WiFi connection","text":"<ol> <li>Select your existing WiFi network from the list of networks.</li> <li>Select <code>Change Settings</code>.</li> <li>Pick the server that is the closest to your location out of the below chart and enter its Primary and Secondary DNS into your connection settings.</li> <li>Save the settings and test the connection.</li> </ol>"},{"location":"extras/blocking_nintendo/#using-homebrew-to-set-90dns-on-all-existing-wifi-networks","title":"Using homebrew to set 90dns on all existing WiFi networks","text":"<ol> <li>Download switch-90dns-setter and put it in the switch folder.</li> <li>Launch CFW and open the homebrew menu.</li> <li>Launch <code>90dns setter</code>.</li> <li>Press X to apply 90dns to all WiFi networks.</li> <li>Press Y to reboot the switch.</li> <li>Check in system settings if networks have a custom DNS applied.</li> </ol>"},{"location":"extras/blocking_nintendo/#testing-if-you-can-reach-nintendo","title":"Testing if you can reach nintendo","text":""},{"location":"extras/blocking_nintendo/#testing-via-the-eshop-stock","title":"Testing via the eShop (Stock)","text":"<ol> <li>Open the eShop. Wait until it either opens or displays an error</li> <li>If it displays \"Unable to display page.\" you seem to have Nintendo blocked</li> </ol>"},{"location":"extras/blocking_nintendo/#testing-via-a-homebrew-app-cfw","title":"Testing via a homebrew app (CFW)","text":"<ol> <li>Download the latest release of the 90dns Tester</li> <li>Place the <code>Switch_90DNS_tester.nro</code> in the <code>switch</code> folder on your SD</li> <li>Enter the homebrew menu and run the 90dns Tester</li> <li>After the test finished it should look similar to the below picture, with every <code>nintendo</code> domain being blocked</li> </ol>"},{"location":"extras/cheats/","title":"Games cheats","text":"<p>For cheats management, EdiZon is recommended. It has support for Atmosphere's cheat engine, providing an easy way to download new cheats, as well as toggle them on or off.</p> <p> </p>"},{"location":"extras/cheats/#instructions","title":"Instructions","text":"<p>Atmosphere looks for cheats to load in the <code>contents</code> sub-folder of the <code>atmosphere</code> folder. The template it looks for is <code>sd:/atmosphere/contents/&lt;title_id&gt;/cheats/&lt;build_id&gt;.txt</code>. You need to create the <code>&lt;title_id&gt;</code> folder and sub-folders manually:</p> <ul> <li><code>title_id</code> being the title or program of a game. This is game specific.</li> <li><code>build_id</code> being the version of a game. Cheats can be version specific so make sure the cheats you are using are compatible with your version.</li> </ul> <p>Note: On Atmosphere 0.9.4 and below <code>contents</code> is called <code>titles</code>. </p> <p>Switch game title IDs and build IDs can be found using the cheat menu of EdiZon (TID and BID, see below for a sample). Once the title is launched while in Atmosphere, your cheats should be applied.</p> <p>Preventing cheats from being active</p> <p>To prevent cheats from being enabled by default, you can change your atmosphere configuration:</p> <ul> <li>Copy <code>system_settings.ini</code> from <code>/atmosphere/config_templates</code> to <code>/atmosphere/config</code> if it is not already there.</li> <li>Edit the line <code>; dmnt_cheats_enabled_by_default = u8!0x1</code> to <code>dmnt_cheats_enabled_by_default = u8!0x0</code>.     Make sure to remove the space and the semicolon \" ;\"</li> </ul> <p>By default, holding the L button while launching a game will disable any cheat.</p> <p>For more in-depth details about Atmosphere's cheat engine, you can refer to this page.</p> <p>Cheats in EdiZon</p> <p>Here the title ID of the game (TID) is \"0100646009FBE000\" and the build ID of the game (BID) is \"0B9A75586BC1A6C6\". Cheats are loaded from <code>sd:/atmosphere/contents/0100646009FBE000/cheats/0B9A75586BC1A6C6.txt</code>.</p> <p></p>"},{"location":"extras/dumping_title_keys/","title":"Dumping Title Keys","text":"<p>This section is for dumping your games' title keys.</p> <p> </p> <p>Advanced users only!</p> <p>Title keys are meant for decrypting game dumps, usually for modding purposes. Most users won't need this.</p> <p> </p>"},{"location":"extras/dumping_title_keys/#what-you-need","title":"What you need","text":"<ul> <li>The latest release of Lockpick_RCM in your <code>/bootloader/payloads</code> folder</li> </ul>"},{"location":"extras/dumping_title_keys/#instructions","title":"Instructions","text":"<ol> <li>Enter RCM and inject the Hekate payload.</li> <li>Tap the <code>Payloads</code> option, then press Lockpick_RCM.bin.</li> <li>If Lockpick_RCM asks you to select between SysNAND or EmuNAND, choose SysNAND by navigating with the volume buttons and pressing the power button.</li> <li>Lockpick_RCM should now inform you that your title keys have been saved to <code>/switch/title.keys</code> on the SD card.</li> </ol>"},{"location":"extras/game_modding/","title":"Game modding with LayeredFS","text":"<p>LayeredFS, a tool built in to Atmosphere, allows you to replace game files with your own.</p> <p> </p>"},{"location":"extras/game_modding/#instructions","title":"Instructions","text":"<p>Make a folder on your SD card inside the <code>atmosphere/contents/</code> folder, with the name being the title ID of the game you would like to replace the files of. Note: On Atmosphere 0.9.4 and below <code>contents</code> is called <code>titles</code></p> <p>Switch game title IDs can be found on http://nswdb.com/. If you have a pre-made mod, the files would be placed here. Then, once the title is launched while in Atmosphere, your mod should load. By default, holding the L button while launching a game will disable any mod.</p> <p>Batman in BOTW</p> <p></p>"},{"location":"extras/glossary/","title":"Glossary of common hacking terms","text":"<p>This section is dedicated to explaining a number of common terms that are used when hacking the Nintendo Switch as well as linking a number of resources that can help fledgling developers or curious users.</p>"},{"location":"extras/glossary/#hacking-terms","title":"Hacking terms","text":"<p>The following list is in alphabetical order.</p> <ul> <li>90DNS: DNS that blocks system updates on the Nintendo Switch. This can be enabled by following the guide here.</li> <li>Atmosphere: The CFW developed by the Atmosphere-NX organization on GitHub and the one used in this guide.</li> <li>AutoRCM: A method that corrupts parts of your boot0 and boot1, causing the Switch to boot into RCM automatically. Using this requires an additional peripheral (such as a computer, phone, dongle or trinket) to be able to boot your Switch.</li> <li>boot0 and boot1: Two partitions of the Switch NAND.</li> <li>CFW: Short for custom firmware. Custom firmware permits you to completely modify how your Switch works.</li> <li>Deja Vu: An unreleased exploit chain for the Nintendo Switch. The completely unpatched version of this chain will grant access to TrustZone, which effectively means being able to enter CFW. The TrustZone part of this exploit was patched in firmware version 5.0.0 and up, but normal homebrew access can still be gained up to firmware version 6.0.1.</li> <li>DNS: Domain Name System. Basically, it's the internet's addressbook. If you visit a website, the DNS is what tells you what server the site is hosted on.</li> <li>Dongle: Device you can plug in the charging port of your Switch to automatically send a payload if your Switch is in RCM.</li> <li>Encryption keys: Keys used to encrypt files from the Nintendo Switch. These can be dumped by following the guide here.</li> <li>BIS keys: Specific keys used to decrypt the NAND.</li> <li>fusee-gelee/ShofEL2: Two names for two different implementations of the same exploit. This is an exploit that grants full bootrom access to the Nintendo Switch from the Tegra X1s RCM and permits us to run CFW. This exploit requires an external device and a tiny hardware modification. fusee-gelee is developed by an ex-ReSwitched developer, while ShofEL2 is developed by the failoverfl0w team. This guide uses fusee-gelee.</li> <li>hactool: Software used to decrypt Nintendo Switch files like .XCI and .NSP files.</li> <li>Hekate: A bootloader for the Nintendo Switch. The current guide uses this in combination with essential files from Atmosphere to boot CFW.</li> <li>Homebrew: Unsigned code that can be ran on the Nintendo Switch. Examples of homebrew include save editors, emulators and ports of PC games, but can also include completely original games. To run this code, you need to have an exploit.</li> <li>Homebrew launcher: Software developed by the Switchbrew team that lets you run other Homebrew.</li> <li>Jig: Refers to a piece of hardware that you can put in the Joycon rail to enter RCM.</li> <li>KIP: Short for Kernel Initial Process. These files can be loaded in when the Switch boots in CFW and provide additional functionality.</li> <li>NAND: The internal filesystem used by the Switch. Contains boot0 and boot1, as well as PRODINFO and various other partitions.</li> <li>nx-hbloader: Intermediary program used to load the Homebrew Launcher from CFW developed by Switchbrew. Comes bundled with Atmosphere.</li> <li>PRODINFO: A partition on the NAND of your Switch. This along with boot0 and boot1 is the only part of your Switch that can render it unbootable if improperly modified. Atmosphere backs up this partition on booting and it is included in your NAND backup.</li> <li>ReSwitched: A hacking team that is one of the main developers for Atmosphere.</li> <li>RCM: A shorthand for \"Recovery Mode\". When talking about hacking the Switch, this commonly refers to the Recovery Mode in the Tegra X1 chip that is included in the Nintendo Switch. Can be entered by holding down the Tegra X1 home button. This button is not the same as the home button on the joycons. Ways of pressing this button can be found here.</li> <li>TegraRCMGUI/fusee-interface-tk: Software used to run the fusee-gelee exploit on the Switch.</li> <li>Tegra X1: A chip made by Nvidia that is used in the Nintendo Switch.</li> <li>Trinket: A tiny chip that is soldered on the Switch motherboard to automatically send a payload if it is in RCM.</li> <li>TrustZone: The highest security level on the Switch.</li> <li>XCI/NSP: Format used to dump games to. XCI is used for gamecard dumps, while NSP is for dumping digital titles.</li> </ul>"},{"location":"extras/glossary/#resources","title":"Resources","text":"<p>The resources below are for users and developers interested in developing Homebrew or for those that want to get a more technical understanding of the various concepts.</p> <ul> <li>The ReSwitched FAQ lists a general overview of how the Switch works.</li> <li>Switchbrew is a wiki detailing the inner workings of the Nintendo Switch's firmware.</li> <li>libNX documentation. LibNX is the library used to develop Homebrew on the Nintendo Switch.</li> </ul>"},{"location":"extras/nandrestore/","title":"Restoring a NAND Backup","text":""},{"location":"extras/nandrestore/#restore-a-nand-backup-to-the-switch","title":"Restore a NAND backup to the switch","text":"<p>Warning:</p> <p>-This will reset all of your saves, games, system version and other system settings back to a point when you made the the nand backup. Keep this in mind, as you probably don't have to restore a nand backup unless you have bricked your switch or want to go back online safely after using cfw.</p> <p>-If you're going to restore an old NAND which will downgrade your firmware it's best to create a second NAND backup before restoring the first one in case something goes wrong.</p>"},{"location":"extras/nandrestore/#what-you-need","title":"What you need:","text":"<ul> <li>Your <code>rawnand.bin</code> (Combined or in 15 or 30 parts)</li> <li>Your <code>BOOT0</code> and <code>BOOT1</code><ul> <li>If you're missing any of the files above, ask for further help in the Nintendo Homebrew Discord server.</li> </ul> </li> <li>The Hekate Payload</li> <li>A microSD card larger than 32gb</li> </ul>"},{"location":"extras/nandrestore/#instructions","title":"Instructions:","text":"<p>Before we start, check if you have a tree of folders called <code>backup/[8 Character NAND id]/restore</code> on your sd card.</p> <p>If you don't see a backup or [8 Character NAND id] folder on your sd card:</p> <p>This means you do not have a nand backup, it is highly recommended you make one as soon as possible. Follow the steps below to make one.</p> <ol> <li>Launch the latest Hekate payload on your switch.</li> <li>Navigate to <code>Tools &gt; Backup eMMC &gt; eMMC BOOT0 &amp; BOOT1</code> and let it do its thing.</li> <li>Wait for the process to complete. When it's completed, you now have a <code>backup/[8 Character NAND id]/restore</code> folder on your sd card. Continue with step 1 of the guide.</li> </ol> <ol> <li>Copy your <code>rawnand.bin</code> (combined or in 15 or 30 parts), <code>BOOT0</code>, and <code>BOOT1</code> to the <code>backup/[8 Character NAND id]/restore</code> folder on the sd card.</li> <li>Put your sd card into your switch, and launch Hekate.</li> <li>Navigate to <code>Tools &gt; Restore eMMC</code>. Select <code>Restore eMMC BOOT0 &amp; BOOT1</code>. Wait for this process to complete.</li> <li>In that same menu, select <code>eMMC RAW GPP</code> and wait for the process to complete. This will take a very long time to complete.</li> </ol> <p>If you're downgrading using your NAND backup</p> <p>If the security version you were on before you performed the NAND restore is HIGHER than the NAND backup itself, you have to enable autoRCM to not get stuck in a boot crash. A system update is considered a security version when a fuse is burned, you can check which versions burn fuses here.</p> <p>If you were in autorcm before you upgraded to a newer security version (and still were after the upgrade) you don't have to do this.</p> <ol> <li>In Hekate's main menu, navigate to <code>Tools</code> and go to the bottom of the page where you will find a button called <code>Archive bit - AutoRCM</code></li> <li>Select the <code>AutoRCM</code> buttom and you will see <code>ON</code> written next to it. This means it is enabled.</li> </ol>"},{"location":"extras/rcm_injectors/","title":"RCM Payload Injectors","text":"<p>There are currently multiple RCM payload injectors available from multiple different companies and individuals. These devices remove the need to use a computer or smartphone when hacking an unpatched Switch. Each injector has its own advantages and disadvantages, listed below:</p> Name Manufacturer RCM Jig Included? RCM Jig Storage? Standard Payload (.bin) Support? Payload on SD Support? Multi-Payload Support? Battery Life Recharge Time Price (USD) Misc Info AceNS (Old) Ace3DS Team \u2714\ufe0f \u274c \u2714\ufe0f \u274c \u2714\ufe0f N/A (Capacitors) 10 seconds $18.00\u200b (Discontinued) Not Recommended: Overpriced clone of the RCMLoader Zero AceNS (New) Ace3DS Team \u2714\ufe0f \ufe0f \u2714\ufe0f \u2714\ufe0f \u274c \u2714\ufe0f 45mAh LiPo (~1000 injections) 1 hour $17.50 Not Recommended: Overpriced clone of the RCMLoader One AceNS Pro Ace3DS Team \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f (Required) \u274c 45mAh LiPo (~1000 injections) 1 hour $42.90 Not Recommended: Overpriced clone of the RCMLoader One with multiple features missing DragonInjector MatinatorX \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f (Required) \u2714\ufe0f 40mAh CR1612 (~4000 injections) Non-Rechargeable (Replacable) $30.00\u200b (Discontinued) Fits in the Switch's gamecard slot NS-Atmosphere Generic \u2714\ufe0f \u2714\ufe0f \u274c \u274c \u274c 150mAh LiPo (&gt;1000 injections) &gt;1 hour $13.15 Not Recommended: Unsafe jig, overly bulky, changing payload requires installing a program, lack of .bin support complicates usage R4S R4i-SDHC Team \u2714\ufe0f \u274c \u2714\ufe0f \u2714\ufe0f \u274c 120mAh LiPo (~1000 injections) 1 hour $19.99 RCMLoader Zero Xkit \u2714\ufe0f \u274c \u2714\ufe0f \u274c \ufe0f \u2714\ufe0f N/A (Capacitors) 10 seconds $5.99\u200b (Discontinued) RCMLoader One Xkit \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c \u2714\ufe0f 45mAh LiPo (~1000 injections) 1 hour $9.99 SX Gear Team Xecuter \u2714\ufe0f \u274c \u274c \u2714\ufe0f (Required) \u274c N/A (Supercapacitors) 5-10 seconds $24.95 Not Recommended: Lack of .bin support complicates usage SX Pro Team Xecuter \u2714\ufe0f \u274c \u274c \u2714\ufe0f (Required) \u274c N/A (Supercapacitors) 5-10 seconds $49.99 Not Recommended: Lack of .bin support complicates usage"},{"location":"extras/save_management/","title":"Save Management","text":"<p>For save management, JKSV is recommended. It can be used to back up and restore game saves to your SD card. </p> <p>Checkpoint is also a save manager. It can be used to back up and restore game saves to your SD card. It also has the ability to share save data over FTP and WiFi.</p> <p> </p>"},{"location":"extras/save_management/#jksv","title":"JKSV","text":"<p>Please read JKSV's homepage for information on how to use it.</p> <p></p>"},{"location":"extras/save_management/#checkpoint","title":"Checkpoint","text":"<p>Please read Checkpoint's homepage for information on how to use it.</p> <p></p>"},{"location":"extras/showing_file_extensions/","title":"Showing File Name Extensions on Windows 10","text":"<p>By default, Microsoft Windows 10 does not show file extensions for known file types. This can result in problems when you need to rename files.</p> <p> </p>"},{"location":"extras/showing_file_extensions/#instructions","title":"Instructions","text":"<ol> <li>Open a new File Explorer window.</li> <li>Switch to the View tab/ribbon.</li> <li>On this tab, if the \"File name extensions\" checkbox is blank, put a check/tick mark in it by clicking it.</li> </ol>"},{"location":"extras/theming/","title":"Theming","text":"<p>You can create unique styles and layouts for your Switch Home Menu.</p> <p> </p> <p></p> <p>What to follow</p> <p>Follow the <code>Making a theme</code> section if you want to make a theme.</p> <p>Follow the <code>Installing a theme</code> section if you want to install a theme</p> <p>Follow the <code>Installing a custom font</code> sectio n if you want to install a custom font</p> <p> </p>"},{"location":"extras/theming/#making-a-theme-windows","title":"Making a theme (Windows)","text":""},{"location":"extras/theming/#what-you-need","title":"What you need","text":"<p>The latest release of Switch Theme Injector</p> <ul> <li>You need to download the <code>ReleaseVx.x.zip</code> on the download page</li> </ul>"},{"location":"extras/theming/#making-the-theme","title":"Making the theme","text":"<ol> <li>Unzip <code>ReleaseVx.x.zip</code> to somewhere on your pc's drive.</li> <li>Open up the <code>SwitchThemes.exe</code> app. Navigate to <code>NXTheme Builder</code>.</li> <li>Select a Home menu part, A 720p image and a Layout patch. Click on <code>Build NXTheme</code> after selecting your home menu part, image and layout patch.</li> <li>Fill out the details in the window that pops up. After filling out this window and clicking ok, you will get asked where to save the NXTheme file. Save this file to a temporary folder.</li> <li>Repeat step 3 and 4 for every Home Menu part of the Switch you want to modify.</li> </ol>"},{"location":"extras/theming/#making-a-theme-mac-linux-chrome-os","title":"Making a theme (Mac / Linux / Chrome OS)","text":""},{"location":"extras/theming/#making-the-theme_1","title":"Making the theme","text":"<p>Make sure that the images you want to use are 1280x720 and in JPG!</p> <ol> <li>Navigate to Exelix's Web Injector.</li> <li>Select a Theme Target you want to edit. After this, click the Open an Image button and select your background image.</li> <li>Choose a theme name and an author name and optionally a different layout, then click build NxTheme.</li> <li>Your browser will prompt you to download a file. Save this file to a temporary folder.</li> <li>Repeat step 2 to 4 for every Home Menu part of the Switch you want to modify.</li> </ol> <p> </p>"},{"location":"extras/theming/#installing-a-theme","title":"Installing a theme","text":"<p>Community Themes</p> <p>If you want to use community themes, for example from the r/NXThemes, you can follow the guide below to install a community provided nxtheme.</p> <p>Homebrew app store</p> <p>If you want to use the homebrew app store for themes, you can simply install the theme you want via the appstore, and follow the instructions from step 2 onwards below.</p> <ol> <li>Copy the <code>.nxtheme</code> files to the <code>themes</code> folder on your sd card (It is recommended you put them into their own folders, e.g. /themes/awesome_theme/awesome.nxtheme).<ul> <li>Create the <code>themes</code> folder on the root of your sd card if it does not exist. \u00a0</li> </ul> </li> <li>Boot Switch CFW, launch the Homebrew Menu and launch <code>NXThemes Installer</code>.</li> <li>Your theme files should be listed here. You can install them one by one.</li> <li>Reboot your switch to see the changes.</li> </ol> <p> </p>"},{"location":"extras/theming/#installing-a-custom-font","title":"Installing a custom font","text":"<ol> <li>Put a font in the .ttf file format into the <code>themes</code> folder (It is recommended you put them into their own folders, e.g. /themes/cool_font/font.ttf).</li> <li>Boot Switch CFW, launch the Homebrew Menu and launch <code>NXThemes Installer</code>.</li> <li>Find your font and install it.</li> <li>Reboot your switch to see the changes.</li> </ol>"},{"location":"extras/theming/#troubleshooting","title":"Troubleshooting:","text":"<p>My Switch crashes on boot after I installed a theme!:</p> <ul> <li>You installed a bad theme. You can remove it by going into the <code>/atmosphere/contents/0100000000001000/romfs/lyt</code> and deleting every file in that folder.</li> <li>Note: <code>contents</code> is called <code>titles</code> on Atmosphere versions 0.9.4 and below.</li> </ul> <p>The NXTheme installer crashes when I launch it:</p> <ul> <li>This is probably due to the archive bit being set on either the app or the nxthemes. This is usually the result of copying files to an sd card via a Mac. If you are experiencing this issue, try resetting the archive bit via Hekate for all files.</li> </ul>"},{"location":"extras/transfer_sd/","title":"Changing SD cards","text":"<p>The goal of this page is to transfer the contents from one SD card to another one. The method to do this will differ, depending on whether you're using a partition based emuMMC on your SD card or not.</p> <p>We will be using hekate to both backup and restore the emuMMC, so make sure that you have its latest files on your SD card already.</p>"},{"location":"extras/transfer_sd/#instructions","title":"Instructions","text":"<p>You should first check whether you have a file or partition based emuMMC:</p> <ol> <li>Inject the hekate payload.</li> <li>Tap on <code>emuMMC</code>.</li> <li>Under <code>emuMMC Info &amp; Selection</code>, check the text next to <code>Type</code>.<ul> <li>If you have one it should be either <code>SD Raw Partition</code> or <code>SD File</code>.</li> </ul> </li> </ol>"},{"location":"extras/transfer_sd/#if-you-are-using-a-file-based-emummc-or-are-using-no-emummc-at-all","title":"If you are using a file based emummc or are using no emummc at all:","text":"<ol> <li>Remove your SD card.   </li> <li>Insert your old SD card into your computer.</li> <li>Copy the contents of your SD card somewhere to your PC.</li> <li>Eject the SD card and insert your new one.</li> <li>Format your new SD card to FAT32 if it isn\u2019t already.<ul> <li>To do this, use guiformat for example (Windows).</li> </ul> </li> <li>Copy the files from your PC to your new SD card and you\u2019re done.</li> </ol>"},{"location":"extras/transfer_sd/#if-you-are-using-a-partition-based-emummc","title":"If you are using a partition based emummc:","text":"<p>Space for the backup</p> <p>You need at least 30GB of free space to be able to backup and restore the emuMMC!</p> <ol> <li>Inject the hekate payload.</li> <li>In the main menu, tap on <code>Tools</code>, then <code>Backup eMMC</code> and set <code>SD emuMMC Raw Partition</code> at the bottom of your screen to <code>ON</code>.</li> <li>Backup both <code>SD emuMMC BOOT0 &amp; BOOT1</code> and <code>SD emuMMC RAW GPP</code> (Note: raw gpp may take a while).</li> <li>Once both are done, go back to the main menu, remove your SD card and insert it into your PC.</li> <li>If Windows asks you to format a drive, discard it and select the drive with your SD contents.</li> <li>Copy the contents of your SD card somewhere to your PC.</li> <li>Follow only this page to partition the new SD card for an emuMMC setup.</li> <li>After it\u2019s done, exit and insert your new SD card into your PC.</li> <li>Copy the contents of your old SD card to your new one.</li> <li>Navigate to <code>/backup/&lt;some characters&gt;/</code> on your SD card and move <code>BOOT0</code>, <code>BOOT1</code> and the <code>rawnand.bin.xx</code> files to the <code>restore</code> folder.</li> <li>Eject the SD card and insert it into your switch.</li> <li>Inject the hekate payload once again.</li> <li>Tap on <code>Tools</code>, <code>Restore eMMC</code>, set <code>SD emuMMC Raw Partition</code> at the bottom of your screen to <code>ON</code>.</li> <li>Restore the backup by tapping on both <code>SD emuMMC BOOT0 &amp; BOOT1</code> and <code>SD emuMMC RAW GPP</code> (Note: raw gpp may take a while).<ul> <li>It is very important that for both of these the <code>SD emuMMC Raw Partition</code> option is enabled, otherwise you will be altering your sysMMC   which is not what you want.</li> </ul> </li> <li>Your emuMMC is now restored on the new SD card and you should be able to launch it from <code>Launch</code> -&gt; <code>Atmosphere FSS0 emuMMC</code> in hekate.</li> </ol>"},{"location":"extras/updating/","title":"Keeping your system up-to-date","text":"<p>This page documents how you can keep your system up-to-date.</p> <p>After following our guide, your system will consist of three core elements that can be updated. Atmosphere, Hekate and your system firmware.</p>"},{"location":"extras/updating/#updating-atmosphere","title":"Updating Atmosphere","text":"<p>When updating Atmosphere always make sure to read the release notes. They may list important changes and modifications to your system.</p> <p>Updating from below Atmosphere 1.0.0</p> <p>If you update from below Atmosphere 1.0.0, there are additional steps to follow. You will have to delete the <code>sept</code> folder from your sd, delete <code>fusee-secondary.bin</code> from your <code>atmosphere</code> folder and update your hekate config file: hekate_ipl.ini in the <code>bootloader</code> folder.</p> <p>When a new version of Atmosphere releases, you can update Atmosphere by following these steps:</p> <ol> <li>Turn off your Nintendo Switch and plug your SD card in your computer.</li> <li>Download the latest release of Atmosphere (Download the <code>atmosphere-(version)-master-(version)+hbl-(version)+hbmenu-(version).zip</code> release of Atmosphere.)</li> <li>Copy the contents of the Atmosphere <code>.zip</code> file to the root of your SD card.<ul> <li>If you are prompted to overwrite files, do so.</li> </ul> </li> <li>(If your hekate is not on the latest version) Update hekate via the steps below</li> <li>Put your SD card back in your Switch and launch CFW.</li> </ol>"},{"location":"extras/updating/#updating-hekate","title":"Updating Hekate","text":"<p>When updating Hekate always make sure to read the release notes. They may list important changes and modifications to your system.</p> <p>When a new version of Hekate releases, you can update by following these steps:</p> <ol> <li>Turn off your Nintendo Switch and plug your SD card in your computer.</li> <li>Download the latest version of Hekate (Download the <code>hekate_ctcaer_(version).zip</code> release of hekate).</li> <li>Copy the <code>bootloader</code> folder from the Hekate <code>.zip</code> file to the root of your SD card. If you are asked to overwrite or merge files while copying, say yes to merge/overwrite them.</li> <li>Put your SD card back in your Switch and launch Hekate.</li> <li>Go to the Options tab at the top right of the screen. Turn \"Update Reboot 2 Payload\" on the bottom right ON (if it isn't on already). Tap \"Save Options\" at the bottom of the screen.</li> </ol>"},{"location":"extras/updating/#updating-your-firmware","title":"Updating your firmware","text":"<p>Always check before updating your system firmware if the latest version of Atmosphere as well as the latest version of Hekate support the firmware version you are updating towards.</p> <p>In addition, updating to or past some firmwares update the gamecard firmware. Reference the table below for information about these.</p> Updating from Updating towards Updates gamecard firmware Below 4.0.0 Below 4.0.0 No Below 4.0.0 4.0.0 or above Yes On or above 4.0.0, but below 9.0.0 At least 4.1.0 but below 9.0.0 No On or above 4.0.0, but below 9.0.0 9.0.0 or above Yes On or above 9.0.0, but below 11.0.0 At least 9.1.0 but below 11.0.0 No On or above 9.0.0, but below 11.0.0 11.0.0 or above Yes On or above 11.0.0 but below 12.0.0 At least 11.0.1 but below 12.0.0 No On or above 11.0.0 but below 12.0.0 12.0.0 or above Yes On or above 12.0.0 Latest supported Atmosphere &amp; Hekate revision No <p>If at least one of the versions you are updating towards also updates the gamecard firmware, you will not be able to downgrade below that version without making the gamecard slot unusable until you update.</p> <p>Atmosphere (and Hekate) come bundled with patches that automatically disable the gamecard slot if it is detected that the system has an older gamecard firmware that would be updated. If you boot into RCM on each boot (for example by using AutoRCM), this means that the gamecard slot will not be updated and you can downgrade below that version. If this happens, you will not be able to use the gamecard slot as long as you are on the newer firmware.</p> <p>Otherwise, you can safely update your system firmware through the system settings.</p> <p>Note about autoRCM</p> <p>If you have autoRCM enabled and you're updating your system while in stock firmware, updating will disable autoRCM and you will need to enter RCM manually to boot custom firmware again. To prevent autoRCM from being disabled, boot CFW on sysMMC and update through settings from there, as booting without AutoRCM will burn any preserved fuses.</p>"},{"location":"extras/updating/#about-emummc","title":"About emuMMC","text":"<p>sysMMC and emuMMC have separate system firmwares and need to be updated separately.</p> <p>If you keep your emuMMC offline, you will have to use a gamecard to update your system firmware, synchronize it with another Nintendo Switch or dump an updated firmware from your sysMMC.</p>"},{"location":"extras/updating/#updating-emummc-by-dumping-an-updated-firmware-from-your-sysmmc","title":"Updating emuMMC by dumping an updated firmware from your sysMMC","text":"<p>Do you have an eMMC backup yet?</p> <p>Please do not start this guide without doing a RAW GPP and a BOOT 0/1 eMMC backup!</p> <p>You can learn how to make one here.</p> <p>Downgrading</p> <p>This guide is made for updating your emuMMC. It is not for downgrading. Downgrading at all, sysMMC or emuMMC, is not recommended and not worth it. Downgrading is also very dangerous and can lead to serious complications even when performed correctly.</p>"},{"location":"extras/updating/#what-you-will-need","title":"What you will need","text":"<ul> <li>The latest release of TegraExplorer</li> <li>The latest release of Atmosphere</li> </ul>"},{"location":"extras/updating/#preparing-your-sd-card","title":"Preparing your SD card","text":"<ol> <li>Insert your microSD card into your computer.</li> <li>Download <code>TegraExplorer.bin</code> and place it somewhere on your PC (A good idea is to put it where you keep all your switch payloads like Hekate).</li> <li>Update Atmosphere and Hekate by using the above guides.</li> <li>If you haven't already, update the sysMMC to the latest firmware.</li> </ol>"},{"location":"extras/updating/#dumping-your-sysmmc-firmware","title":"Dumping your sysMMC firmware","text":"<ol> <li>Make sure your sysMMC is up to date. If your sysMMC is not up-to-date, update it through the System Settings.</li> <li>Inject <code>TegraExplorer.bin</code> using TegraRCMGUI (Like you would with Hekate).</li> <li>Using the joystick and the A buttons, select <code>FirmwareDump.te</code>, then select <code>Dump sysmmc</code>.</li> <li>Wait about 1-2 minutes for the tool to dump your firmware.</li> <li>When the tool finishes, press any button.</li> <li>Select <code>Reboot to atmosphere/reboot_payload.bin</code>.</li> </ol>"},{"location":"extras/updating/#updating-your-emummc-with-daybreak","title":"Updating your emuMMC with Daybreak","text":"<ol> <li>In Hekate go to <code>Launch -&gt; Atmosphere FSS0 emuMMC</code>.</li> <li>Once booted, hold <code>R</code> while launching a game to boot into the homebrew menu.</li> <li>Find Daybreak in the homebrew menu and launch it.</li> <li>Tap on <code>Install</code> and navigate to <code>tegraexplorer/Firmware/&lt;latest firmware number&gt;</code>.</li> <li>Tap on <code>Continue</code> and then <code>Preserve settings</code>.<ul> <li>If you see the message <code>Warning: exFAT firmware is missing or corrupt</code>, you likely don't have the exFAT drivers installed on your sysMMC. Just press continue if this is the case.</li> </ul> </li> <li>If it is available choose <code>Install (FAT32 + exFAT)</code>, otherwise <code>Install (FAT32)</code> and then <code>Continue</code>.</li> <li>Wait until Daybreak completes installing the dumped firmware.</li> <li>Once it completes, it will ask if you want to reboot. Tap <code>Reboot</code>.</li> <li>Once rebooted, launch into emuMMC and verify your system works. You can verify your system has been properly updated in <code>Settings -&gt; System</code>.</li> </ol>"},{"location":"user_guide/getting_started/","title":"Getting Started","text":""},{"location":"user_guide/getting_started/#finding-your-serial-number","title":"Finding your serial number","text":"<p>The first thing to do is determine if your Switch is vulnerable to fusee-gelee, the exploit we will be using to launch CFW.</p> <p>This vulnerability was independently discovered by several different Switch hacking teams, and multiple variants of it were released to the public in April 2018 after a 90-day disclosure period ended. Nintendo and NVIDIA were made aware of the issue before the public release as a result, and Switch systems that are not vulnerable to the exploit started being spotted in the wild in July 2018. NVIDIA publicly acknowledged the flaw in April as well. In July 2019, Nintendo announced updated consoles, a handheld variant of the Switch called the Switch Lite (HDH-001), and a new model of original Switch (HAC-001-01) with better battery life. Both of these new models use a new processor called the T210b01 (also known as T214 and Mariko) with a new bootROM, and are not hackable at the current time.</p> <p>Patched and Mariko units can be identified by their serial number. This number can be found on the bottom of your Switch adjacent to the USB-C port, or in the Settings applet at System -&gt; Serial Information. </p> <p> </p> <p></p> <p> </p> <p> </p>"},{"location":"user_guide/getting_started/#determining-if-your-switch-is-vulnerable","title":"Determining if your Switch is vulnerable","text":"<p>The homebrew community has crowdsourced a list of known serial numbers which are vulnerable to fusee-gelee. </p> <ul> <li>If your serial number is on this list as \"potentially patched\", follow the guide and see if your system works. </li> <li>If your serial number is listed as \"patched\", there is nothing you can do at this time. </li> <li>If your system is patched, it is highly advised to keep it on 7.0.1 or lower, if possible, as there may be a vulnerability for these versions in the far future. DO NOT update patched consoles past 7.0.1 if you want to ever have a chance of running homebrew and/or CFW on them.</li> </ul> <p>Notice</p> <p>If you are unsure if your serial is patched, you can test your console yourself following the instructions here.</p> <p> </p>"},{"location":"user_guide/getting_started/#serial-list","title":"Serial list","text":"<p>The following information is based on this GBATemp thread.</p> Serial Numbers Unpatched Potentially patched Patched XAW1 XAW10000000000 to XAW10074000000 XAW10074000000 to XAW10120000000 XAW10120000000 and up XAW4 XAW40000000000 to XAW40011000000 XAW40011000000 to XAW40012000000 XAW40012000000 and up XAW7 XAW70000000000 to XAW70017800000 XAW70017800000 to XAW70030000000 XAW70030000000 and up XAJ1 XAJ10000000000 to XAJ10020000000 XAJ10020000000 to XAJ10030000000 XAJ10030000000 and up XAJ4 XAJ40000000000 to XAJ40046000000 XAJ40046000000 to XAJ40060000000 XAJ40060000000 and up XAJ7 XAJ70000000000 to XAJ70040000000 XAJ70040000000 to XAJ70050000000 XAJ70050000000 and up XAK1 N/A XAK10000000000 and up N/A <p>If your serial number is not listed above, your device is not vulnerable.</p> <p> </p>"},{"location":"user_guide/getting_started/#console-preparation","title":"Console Preparation","text":"<p>Important</p> <p>Before setting up the console for homebrew, it is important to have at least one eShop game (such as Fallout Shelter), application (such as YouTube or Hulu), or a game demo such as 10 Second Run RETURNS. Running homebrew through any game cartridge will also work, but it must be inserted. Running homebrew does not permanently replace or remove the game/application, nor does it become tied to only one game/application (any cartridge you have inserted or any game/application installed can always be used). Once you have any game or application, you are prepared to continue on with the guide.</p> <p> </p>"},{"location":"user_guide/getting_started/#version-table","title":"Version Table","text":"<p>Note</p> <p>Nereba and Caffeine how-to guides are currently a Work-In-Progress (WIP)!</p> <p>Note</p> <p>While the \"New\" Switch (HAC-001-01)'s earliest possible firmware is 7.0.1, it is not vulnerable to d\u00e9j\u00e0 vu, the exploit used by Nereba and Caffeine, because of hardware differences from the \"Old\" Switch (HAC-001).</p> <p> </p> Firmware Version Unpatched Switches (HAC-001) Patched Switches (HAC-001) \"New\" Switch (HAC-001-01) Switch Lite (HDH-001) 1.0.0 Nereba or RCM N/A N/A N/A 2.0.0 - 3.0.2 Caffeine or RCM N/A N/A N/A 4.0.0 - 4.1.0 Caffeine or RCM Caffeine N/A N/A 5.0.0 - 7.0.0 RCM Wait for CFW N/A N/A 7.0.1 RCM Wait for CFW Cart update to 8.0.1 N/A 8.0.1 RCM Wait for homebrew Wait for homebrew Wait for homebrew 8.1.0 and up RCM Unhackable (currently) Unhackable (currently) Unhackable (currently) <p> </p> <p>About OLED</p> <p>OLED Switches (HEG-001) are currently unhackable via software.</p> <p> </p> <p>If your Switch is not patched, continue to RCM </p>"},{"location":"user_guide/all/launching_cfw/","title":"Launching CFW","text":"<p>Now that the preparation work is out of the way, we're finally ready to launch custom firmware on the Switch.</p> <p>Unlike systems such as the DSi, Wii, or 3DS, Switch CFW is currently volatile. It will only work as long as your Switch is on. As soon as your Switch completely loses power for any reason (shutting down, battery dying, etc.), CFW will no longer be active and you will need to follow these instructions again.</p> <p> </p> <p>Keep emuMMC offline at all times</p> <p>Your emuMMC (emuNAND) should never connect to Nintendo. For online play, eShop browsing, or any other Nintendo online activity, use your sysNAND. Using both emuMMC and sysNAND online will likely result in a ban.</p>"},{"location":"user_guide/all/launching_cfw/#instructions","title":"Instructions","text":"<ol> <li>Power on your Switch into RCM, and inject the Hekate payload</li> <li>Navigate to <code>Launch</code> using the touch screen</li> <li>Find <code>Atmosphere FSS0 emuMMC</code> and launch it</li> </ol> <p>Your Switch is now booting into Atmosphere.</p> <p>To verify Atmosphere launched properly, open the Settings applet, and navigate to System. You should see <code>AMS</code> next to the version number, as well as an <code>E</code> at the end, indicating you are booted into emuMMC.</p> <p> </p> <p></p> <p> </p> <p>Reboot to Hekate</p> <p>Once booted into emuMMC, you can easily get back to Hekate by holding the power button, and selecting <code>Restart</code> in the power menu.</p> <p> </p>"},{"location":"user_guide/all/launching_cfw/#launching-the-homebrew-menu","title":"Launching the Homebrew Menu","text":"<p>You will now be able to launch the Homebrew Menu by opening the album or by holding the R button while launching any game (including demos/cartridges), or application (e.g. Youtube/Hulu). If R is not held, the game or application will launch like normal.</p> <p>A note about using the album for the Homebrew Menu</p> <ul> <li>Using the album for the Homebrew Menu instead of a game or application has several limitations, including but not limited to: a smaller amount of available memory (RAM), as well as being unable to launch a full-featured web browser. It is strongly recommended to launch homebrew through applications or games instead.</li> </ul> <p>Adding new applications</p> <ul> <li>Place homebrew applications (<code>.nro</code> files) into the <code>switch</code> folder on your SD card.</li> </ul> <p> </p>"},{"location":"user_guide/all/launching_cfw/#what-the-included-homebrew-applications-do","title":"What the included homebrew applications do","text":"<ul> <li> <p>JKSV is a save manager, it can dump and restore saves from/to your system. For more information, see Save Management</p> </li> <li> <p>FTPD is a ftp tool for connecting your Switch's sd card wirelessly to your pc. Tools like WinSCP can connect to your switch on <code>(ip of switch):5000</code></p> </li> <li> <p>NX-Shell is a file explorer for the Switch. You can move files, listen to mp3's, view images etc.</p> </li> <li> <p>NXThemeInstaller is a theme installer app. See the Theming section of our guide for more information</p> </li> <li> <p>hbappstore is a homebrew app store where a large collection of switch homebrew is kept.</p> </li> </ul> <p> </p>"},{"location":"user_guide/all/launching_cfw/#updating-your-setup","title":"Updating your setup","text":"<p>Whenever a new Switch firmware update releases you may need to update your files to be able to use CFW on the new version. Make sure to follow the instructions on this page to update your setup correctly.</p>"},{"location":"user_guide/all/making_essential_backups/","title":"Making Essential Backups and dumping keys","text":"<p>Important</p> <p>It is critical to make these backups. Do not skip these steps.</p> <p> </p>"},{"location":"user_guide/all/making_essential_backups/#making-a-nand-backup","title":"Making a NAND Backup","text":"<p>Important</p> <p>A NAND backup is crucial. They can be used to restore the device to a working state in case of emergencies.</p> <p>Once the backup is finished, keep it somewhere safe. The best backup is the one you have but never need, and the worst backup is the one you need but never made. To save space, it's recommended to compress the end-result with a <code>.zip</code> file or something similar.</p> <p>It's highly recommended that you use an SD card that is formatted to FAT32 and has at least 32 gigabytes of space free. This will still work on smaller cards, but it's not ideal.</p>"},{"location":"user_guide/all/making_essential_backups/#instructions","title":"Instructions","text":"<ol> <li>Enter RCM and inject the Hekate payload</li> <li>Use the touch screen to navigate to <code>Tools</code> and then <code>Backup eMMC</code></li> <li>Tap on <code>eMMC BOOT0 &amp; BOOT1</code></li> <li>This should only take a few seconds, but if your SD card is very slow, it may take around a minute.</li> <li>Tap on <code>Close</code> to continue, then tap on <code>eMMC RAW GPP</code></li> <li>This will take a long time. Expect it to take between 10 minutes to an hour (or more, if your SD card is very slow).</li> <li>On FAT32 SD cards or cards that have less than 32 gigabytes of space available, the NAND will be split into 1 or 2 gigabyte parts.<ul> <li>Hekate will stop producing these parts when it runs out of space. When this happens, do the following:</li> <li>Power off your system</li> <li>Insert your SD card into your PC</li> <li>Move all files from the <code>backup</code> folder on your SD card to a safe location on your PC</li> <li>Insert your SD card into your Switch</li> <li>Enter RCM again, inject Hekate again, and continue the backup by tapping on <code>Tools</code> &gt; <code>Backup eMMC</code> &gt; <code>eMMC RAW GPP</code></li> <li>Repeat the process until the NAND is completely dumped</li> </ul> </li> <li>Press <code>Close</code> &gt; <code>Home</code> &gt; <code>Power Off</code></li> <li>Insert your SD card into your PC</li> <li>Copy the <code>backup</code> folder on your SD card to a safe location on your PC</li> </ol>"},{"location":"user_guide/all/making_essential_backups/#getting-your-consoles-unique-keys","title":"Getting your Console's Unique Keys","text":"<p>Important</p> <p>These keys are critical to have. In an extreme emergency, they can be used in conjunction with your NAND backup and other tools to restore your console to a working state.</p> <ol> <li>Enter RCM and inject the Hekate payload.</li> <li>Tap the <code>Payloads</code> option, then press Lockpick_RCM.bin.</li> <li>If Lockpick_RCM asks you to select between SysNAND and EmuNAND, choose SysNAND by navigating with the volume buttons and pressing the power button. If not, continue with step 4.</li> <li>Lockpick_RCM should now inform you that your keys have been saved to <code>/switch/prod.keys</code> on the SD card.</li> <li>Press any button to return to the main menu.</li> <li>Navigate to 'Power off' with the volume buttons and select it with the power button.</li> <li>Insert your SD card into your PC.</li> <li>Copy <code>prod.keys</code> from the <code>switch</code> folder on your SD card to a safe location on your PC (it is suggested to copy it to the same place that you copied your NAND backup to).</li> </ol> <p> </p> <p>Continue to Launching CFW </p>"},{"location":"user_guide/all/partitioning_sd/","title":"Partitioning the SD Card","text":"<p>This will delete everything on your sd card</p> <p>Doing this will delete all your data from your sd card, be warned!</p> <p>Back up your existing Nintendo folder</p> <p>Before we start, if you are using a microSD card already as a storage device for your games, you will want to back up your <code>Nintendo</code> folder that is on the root of your microSD card to a safe place on your computer. This folder contains your downloaded games and game updates. After creating the emuMMC, you will need two copies of your Nintendo folder: one for your sysMMC and one for your emuMMC.</p>"},{"location":"user_guide/all/partitioning_sd/#preparations","title":"Preparations","text":"<p>What you need:</p> <ul> <li>The latest release of TegraExplorer</li> </ul>"},{"location":"user_guide/all/partitioning_sd/#instructions","title":"Instructions","text":"<ol> <li>Inject the TegraExplorer payload with your 64GB (or larger) SD card inserted into your Switch.<ul> <li>If you forgot how to do this, re-read the sending payload section of the guide.</li> </ul> </li> <li>Navigate to <code>Partition the sd</code> and press the A button to enter the SD format menu.<ul> <li>If you can't find the Partition the sd option, make sure that your SD card is inserted and select Mount SD.</li> </ul> </li> <li>Navigate to <code>Fat32 + EmuMMC</code> and press the A button to confirm.</li> <li>Read the warning, and select Yes to partition &amp; format your SD card.<ul> <li>Note: This will delete all data on your SD card. Make sure you backed up your Nintendo folder!</li> <li>This should not take more than a few seconds.</li> </ul> </li> <li>Press any button to return to the main menu.</li> <li>Navigate to <code>Reboot to RCM</code> and press the A button to reboot to RCM. It's now safe to eject your sd card for the next part of the guide.</li> </ol> <p>Windows complaining about an unreadable drive</p> <p>If you get the issue that Windows says the SD card is unreadable and wants to format it, do not format! This is likely your emuMMC partition. After partitioning your sd, your sd will show up as 2 drives on your pc. Use the drive that can be accessed</p> <p> </p> <p>Continue to SD Preparations </p>"},{"location":"user_guide/all/sd_preparation/","title":"SD Preparation","text":"<p>We will now place the required files for the Atmosphere custom firmware and some additional homebrew files on the SD card.</p> <p>Atmosphere has its own bootloader, called fusee. For the purposes of this guide we will be using Hekate instead, so that we can back up the system's NAND (internal storage) and take advantage of other advanced features in the future.</p> <p> </p> <p>File name extensions</p> <p>If you use Windows, you should enable file name extensions before continuing. See this link for a guide on how to do this.</p> <p> </p>"},{"location":"user_guide/all/sd_preparation/#what-you-need","title":"What you need","text":"<ul> <li>The latest release of Hekate (Download the <code>hekate_ctcaer_(version).zip</code> release of hekate)</li> <li>The hekate config file: hekate_ipl.ini</li> <li>The DNS-MITM DNS redirection config: emummc.txt</li> <li>The bootlogo zip folder: bootlogos.zip</li> <li>The latest release of Atmosphere. Download the <code>atmosphere-(version)-master-(version)+hbl-(version)+hbmenu-(version).zip</code> release of Atmosphere.</li> <li>The latest release of Lockpick_RCM (Download the <code>Lockpick_RCM.bin</code> release of Lockpick)</li> <li>The latest release of JKSV (Download the <code>JKSV.nro</code> release of JKSV)</li> <li>The latest release of FTPD (Download the <code>ftpd.nro</code> release of FTPD)</li> <li>The latest release of NXThemeInstaller (Download the <code>NxThemesInstaller.nro</code> release of NxThemeInstaller)</li> <li>The latest release of NX-Shell (Download the <code>NX-Shell.nro</code> release of nx-shell)</li> <li>The latest release of the hbappstore (Download the <code>appstore.nro</code> release of hbappstore)</li> </ul>"},{"location":"user_guide/all/sd_preparation/#instructions","title":"Instructions","text":"<ol> <li>Insert your Switch's SD card into your PC</li> <li>Copy the contents of the Atmosphere <code>.zip</code> file to the root of your SD card</li> <li>Copy the <code>bootloader</code> folder from the Hekate <code>.zip</code> file to the root of your SD card</li> <li>Copy the <code>bootloader</code> folder from the <code>bootlogos.zip</code> file to the root of your SD card<ul> <li>If you're asked to merge the bootloader folders, do so.</li> </ul> </li> <li>Copy <code>hekate_ipl.ini</code> to the <code>bootloader</code> folder on your SD card</li> <li>Copy <code>Lockpick_RCM.bin</code> to the <code>/bootloader/payloads</code> folder on your SD card</li> <li>Create a folder named <code>hosts</code> inside the <code>atmosphere</code> folder on your SD card, and put <code>emummc.txt</code> in it</li> <li>Create a folder named <code>appstore</code> inside the <code>switch</code> folder on your SD card, and put <code>appstore.nro</code> in it</li> <li>Copy <code>JKSV.nro</code>, <code>ftpd.nro</code>, <code>NX-Shell.nro</code> and <code>NxThemesInstaller.nro</code> to the <code>switch</code> folder on your SD card</li> <li>If you were already using your microSD card as a storage device for your games and backed up the Nintendo folder before partitioning your microSD card, please place it back on the root of your microSD card.</li> <li>Reinsert your SD card back into your Switch</li> </ol> <p>About emummc.txt</p> <p>Putting the <code>emummc.txt</code> file provided by this guide into <code>/atmosphere/hosts</code> will prevent your emuMMC (emuNAND) from connecting to Nintendo. Not doing this will likely result in a ban.</p> <p>Your SD card should look similar to this. The <code>Nintendo</code> folder will not be present if your switch has not already booted with the microSD card inserted. </p> <p> </p> <p>Continue to Making Essential Backups </p>"},{"location":"user_guide/modchip/","title":"Introduction to Modchips","text":"<p>Modchips and modchipped switches are different from unpatched switches. They use voltage glitching to glitch the SoC and essentially \"lag out\" the CPU so that <code>sdloader</code> can run.  <code>sdloader</code> is the module responsible for loading <code>payload.bin</code> off of the root of your SD card, this allows even patched switches to run CFW.</p>"},{"location":"user_guide/modchip/#general-knowledge","title":"General knowledge","text":"<p>If you've just finished installing your modchip or getting your switch modchipped, there are general things you should know.</p> <p>Unless you have a modchipped V1 unpatched switch, your switch is not vulnerable to the fusee-gelee exploit found in RCM.  This means that putting your switch in RCM and trying to inject a payload won't do anything.</p> <p>Modchipped switches, depending on the firmware they're running and the kind of modchip you have, will not boot without SD card inserted. (Some modchips and modchip firmwares allow you to bypass the modchip by either holding both volume buttons or either one of the volume buttons, this would allow you to boot normally.) This means that you will not be able to use your switch normally if you don't have an SD card. </p> <p>If you do turn on your switch without SD card inserted, you should end up at a splash screen saying something along the lines of <code>NO SD</code>.</p> <p>The upside of modchips is that you will be able to \"cold boot\" (run homebrew from the point of turning on your switch from a fully-off state) CFW. Running CFW on modchipped switches is also much more simplistic, as it doesn't require you to use an RCM jig and put your switch in RCM. It only requires you to have <code>payload.bin</code> present on the root of your SD card and turn on your switch.</p> <p>Disclaimer</p> <p>We do NOT assist with the sourcing and installation of modchips, it's your own responsibility to install a modchip or let your switch get modchipped. There is always a risk of your switch being rendered dysfunctional if you don't know what you're doing. The NH Discord server is also NOT a place for discussing modchips and fixing bad modchip installations (e.g. by you or a modchip installer).</p> <p>Continue to Ensuring SD Payload </p>"},{"location":"user_guide/modchip/ensure_sd_payload/","title":"Payload and bootloader folder placement","text":"<p>To get ready for formatting/partitioning your SD card, we will need to prepare your SD card with the required files. </p>"},{"location":"user_guide/modchip/ensure_sd_payload/#what-you-need","title":"What you need:","text":"<ul> <li>The latest release of Hekate (Download the <code>hekate_ctcaer_(version).zip</code> release of hekate)</li> <li>Your micro SD card</li> </ul>"},{"location":"user_guide/modchip/ensure_sd_payload/#instructions","title":"Instructions:","text":"<ol> <li>Extract the hekate zip to a location on your computer.</li> <li>Insert your SD card into your computer.</li> <li>Inside of the extracted folder you will find <code>bootloader</code> and <code>hekate_ctcaer_(version).bin</code></li> <li>Copy the <code>bootloader</code> folder and <code>hekate_ctcaer_(version).bin</code> payload to the root of your SD card.</li> <li>Rename the <code>hekate_ctcaer_(version).bin</code> payload to <code>payload.bin</code></li> <li>Turn on your switch.</li> <li>You should now be loaded into hekate. If not, consult the message below.</li> </ol> <p>If your switch does not load into hekate or shows a <code>NO SD</code>/<code>No Payload</code> screen when turning on your switch, ensure that you inserted your SD card and renamed the hekate payload to exactly <code>payload.bin</code></p> <p>Continue to Partitioning the SD </p>"},{"location":"user_guide/rcm/","title":"RCM","text":"<p>RCM (short for ReCovery Mode) is a mode for the switch that allows nintendo to send the switch commands to do various things. People found out that on unpatched switches, you could send a payload, and then quickly copy it into the memory buffer behind the stack, overflowing the memory buffer into the stack, meaning you smash the stack and get full access to everything on the system. We use it here to launch atmosphere.</p> <p>emuNAND vs emuMMC vs sysNAND</p> <ul> <li>sysNAND stands for System NAND, meaning the internal storage in your actual Switch.</li> <li>emuNAND stands for emulated NAND, this means that your entire NAND (system memory) will run off your microSD card with Custom Firmware (CFW). This NAND's contents (games, applications, saves, etc.) are completely separate from your sysNAND.</li> <li>emuMMC is the name for the currently used implementation of emuNAND on Switch. It has no difference from emuNAND besides name.</li> </ul>"},{"location":"user_guide/rcm/#emunand-cfw-recommended-for-new-users","title":"emuNAND CFW (Recommended for new users)","text":"<p>What's needed for emuNAND</p> <ul> <li>A microSD card that's 64GB or larger</li> </ul> <p> </p> <p>Continue to Entering RCM (emuNAND) </p>"},{"location":"user_guide/rcm/#pros-of-using-emunand-over-sysnand-cfw","title":"Pros of using emuNAND over sysNAND CFW:","text":"<ul> <li>Using homebrew applications and CFW features in a safe environment that won't connect to Nintendo services, while the sysNAND can be used online.</li> <li>Allowing users on patched Switches using Caffeine to update their emuNAND to latest and use it online, keeping sysNAND at a lower vulnerable version.</li> </ul>"},{"location":"user_guide/rcm/entering_rcm/","title":"Entering RCM","text":"<p>As the Switch uses a Tegra X1 processor, it has a special recovery mode that is, in most scenarios, useless for the end-user. Fortunately, due to the fusee-gelee vulnerability, this special mode acts as our gateway into CFW.</p> <p>There are several methods of entering RCM (ReCovery Mode). The most affordable of these require nothing more than common household items, while the most reliable are very cheap ($10).</p> <p> </p> <p>Patched Switch</p> <p>Note that patched units can enter RCM, but it is not possible to send a payload on those systems. Also note that RCM is a different recovery mode than the one accessed by holding Volume Up, Volume Down, and Power.</p> <p>Note</p> <p>The order of methods on this page is in the order of ease. The easiest to immediately accomplish are listed at the top, and the most advanced/difficult methods are at the bottom.</p> <p> </p>"},{"location":"user_guide/rcm/entering_rcm/#instructions","title":"Instructions","text":"<ol> <li>Power off the Switch and use one of the methods listed below to short the pins on the right joycon rail.</li> <li>Hold Volume Up and press the Power button.</li> </ol> <p>If your Switch displays the Nintendo logo and boots normally or immediately shuts down, you didn't successfully enter RCM and should try again. Otherwise, if your console did not turn on normally, and the screen remained black with no backlight, your Switch is in RCM.</p>"},{"location":"user_guide/rcm/entering_rcm/#rcm-jig-easiest-for-beginners","title":"RCM Jig (Easiest for beginners)","text":"<p> Click to expand! <p>Note</p> <p>Some jig designs use paperclips, inheriting the same risks as the Metal Bridge / Paperclip method.</p> <p>Note</p> <p>Once you have successfully entered RCM, you can take the jig out of the joycon rail.</p> <p>This method is similar to the Metal Bridge / Paperclip method, but is more reliable and safer in many cases. Jigs hold a wire in place so the correct pins (10 and a ground) are shorted every time.</p> <p></p> <p>In the case you plan to make you own jig, this image lays out the pads numbers on the console. Make sure your jig NEVER touches pin 4. Pin 4 provides 5v power to the Joycons, if connected to any other pin you will fry the console.</p> <p></p>"},{"location":"user_guide/rcm/entering_rcm/#soldered-joy-con-pads-physical-rcm-button-safest","title":"Soldered Joy-Con Pads - Physical RCM Button (Safest)","text":"<p> Click to expand! <p>Note</p> <p>This method requires opening your right Joy-Con, voiding its warranty. Not for the faint of heart.</p> <p>This method comes to us from the mind of pbanj#9188 on Discord. All pictures of this method in action were provided by him, with some supplementary images provided by eip \u221e#3283 on Discord.</p> <p>The goal of this method is to open the right handed Joy-Con to the point that you can reach the contact pads easily. This is similar to the previous method, however you will be soldering wires to pins 7 and 10 (shown below) and wiring them to the \"Joycon release button\" at the top back of the right hand Joycon.</p> <p></p> <p>In order to start this method you will want to take two lengths of wire, and wrap one end of each into a small circle.</p> <p></p> <p>You will then want to take the circular end of one of the wires and add a small amount of solder, keeping it mostly flat (ONLY DO THIS TO ONE OF THE WIRES!). You will then glue this wire down to the below point on the Joycon release button. Make sure glue doesn't cover the top of the solder/wire as it will act as a contact point. Also, ensure that you leave enough space for the button to function correctly. Try pushing the button from the outside and observing its travel path so that you can see where and how you should safely glue the solder glob.</p> <p></p> <p></p> <p>The first wire should now be in place as seen by the green circle below. The second wire does not need any solder, instead you will hold it in place using the screw as shown by the red circle in the picture below.</p> <p></p> <p>Pressing the Joycon button in you should now notice the solder point you created making contact with the piece of metal held in by the screw. Once you have these elements in place you want to connect one wire to pad 7 and the other to pad 10 (it doesn't matter which is which). After that you have successfully created an RCM button on your Joycon. You will now need to hold down the Joycon release button when attempting to boot RCM.</p> <p></p>"},{"location":"user_guide/rcm/entering_rcm/#soldered-joy-con-pads-7-10","title":"Soldered Joy-Con Pads - 7 &amp; 10","text":"<p> Click to expand! <p>Note</p> <p>This method requires opening your right Joy-Con, voiding its warranty. Not for the faint of heart.</p> <p>The goal of this method is to open the right handed Joy-Con to the point that you can reach the contact pads easily. This is similar to the previous method, however the goal is to solder pins 7 and 10 (shown below) together with a surface-mount 0805 10k resistor. Apart from using a physical switch/button, this is currently considered the safest method that involves soldering to pads.</p> <p></p> <p>Here is an example from stuckpixel#3421 on the ReSwitched Discord server.</p> <p></p>"},{"location":"user_guide/rcm/entering_rcm/#soldered-joy-con-pads-9-10","title":"Soldered Joy-Con Pads - 9 &amp; 10","text":"<p> Click to expand! <p>Note</p> <p>This method will result in the right Joy-Con being detected as in wireless mode while attached to the Switch, and this method may result in the Joy-Con being permanently detected as wireless if you update the Joy-Con firmware while this mod is installed. In the latter case, fixing this requires opening up the Joy-Con and reseating the battery. It is recommended to solder pads 7 and 10 together with a resistor instead.</p> <p>Note</p> <p>This method requires opening your right Joy-Con, voiding its warranty. Not for the faint of heart.</p> <p>The goal of this method is to open the right handed Joy-Con to the point that you can reach the contact pads easily. This is similar to the previous method, however the goal is to solder pads 9 and 10 (seen below) together. This can either be done using a small wire, or directly bridging the pads with solder.</p> <p></p> <p>Here is an example from YyAoMmIi#3705 on our Discord server.</p> <p></p>"},{"location":"user_guide/rcm/entering_rcm/#bent-joy-con-pins-not-recommended","title":"Bent Joy-Con Pins (Not recommended)","text":"<p> Click to expand! <p>Note</p> <p>This method will result in the right Joy-Con being detected as in wireless mode while attached to the Switch, and this method may result in the Joy-Con being permanently detected as wireless if you update the Joy-Con firmware while this mod is installed. In the latter case, fixing this requires opening up the Joy-Con and reseating the battery.</p> <p>Note</p> <p>This method requires opening your right Joy-Con, voiding its warranty. Not for the faint of heart.</p> <p>The goal of this method is to open the right handed Joy-Con to the point that you can reach the contact pads easily, and use a thin object such as a knife to gently bend pin 9 and 10 (shown below) slightly up and towards each other so they touch, shorting them.</p> <p></p> <p>Here is an example from Sonlen#1414 on our Discord server.</p> <p></p> <p> </p> <p>Continue to Sending a Payload </p>"},{"location":"user_guide/rcm/sending_payload/","title":"Sending a Payload","text":"<p>If you are here to test if your Switch is patched</p> <p>Make sure you have put your device into RCM and downloaded TegraExplorer. Once finished, if your console is not patched, continue with Partitioning the SD.</p> <p>Now that the device is in RCM, we will need to send it a payload. The methods are mostly the same, but slightly differ depending on what hardware you have available.</p> <p> </p>"},{"location":"user_guide/rcm/sending_payload/#windows","title":"Windows","text":""},{"location":"user_guide/rcm/sending_payload/#what-you-need","title":"What you need","text":"<ul> <li>The latest release of TegraRcmGUI (either the MSI or zip)</li> <li>A USB-A to USB-C cable (or a standard USB-C cable if your computer natively supports USB-C)</li> </ul> <p>Payloads you'll need for this guide:</p> <ul> <li>The latest release of Hekate. The Hekate payload (hekate_ctcaer bin) is located in the hekate_ctcaer zip.</li> <li>The latest release of TegraExplorer.</li> </ul>"},{"location":"user_guide/rcm/sending_payload/#instructions","title":"Instructions","text":"<ol> <li>Install and run TegraRcmGUI.</li> <li>Navigate to the <code>Settings</code> tab, then press <code>Install Driver</code> and follow the on-screen instructions.<ul> <li>If you face issues when installing the driver, follow the driver installation with Zadig section below.</li> </ul> </li> <li>Connect your Switch in RCM to your PC using the USB cable.</li> <li>Navigate to the <code>Payload</code> tab of TegraRcmGUI.<ul> <li>Your Switch should be shown as detected in the bottom left corner.</li> </ul> </li> <li>Press the file button next to <code>Inject payload</code>, and navigate to and select your payload <code>.bin</code> file.<ul> <li>The first time you read this page you should inject TegraExplorer.bin.</li> </ul> </li> <li>Click <code>Inject payload</code> to launch the payload you selected.</li> </ol>"},{"location":"user_guide/rcm/sending_payload/#driver-installation-with-zadig","title":"Driver installation with Zadig","text":"<p>Follow these steps if you face issues when installing the driver with TegraRcmGUI. You will need the latest version of Zadig.</p> <ol> <li>Launch Zadig. In the <code>Options</code> menu, be sure that <code>List All Devices</code> is enabled.</li> <li>Connect your Switch in RCM to your PC using the USB cable.</li> <li>In Zadig, select \"APX\" in the device list.</li> <li>Select <code>libusbK (v3.1.0.0)</code> in the driver list.</li> <li>Click <code>Install Driver</code> and wait for the installation to finish.</li> </ol> <p> </p>"},{"location":"user_guide/rcm/sending_payload/#mac-linux","title":"Mac / Linux","text":""},{"location":"user_guide/rcm/sending_payload/#what-you-need_1","title":"What you need","text":"<ul> <li>The latest release of fusee-interfacee-tk</li> <li>A USB-A to USB-C cable (or a standard USB-C cable if your computer natively supports USB-C)</li> </ul> <p>Payloads you'll need for this guide:</p> <ul> <li>The latest release of Hekate. The Hekate payload (hekate_ctcaer bin) is located in the hekate_ctcaer zip.</li> <li>The latest release of TegraExplorer</li> </ul>"},{"location":"user_guide/rcm/sending_payload/#instructions_1","title":"Instructions","text":"<ol> <li>Download and run the payload injector (if you're on Linux, you will need to run this program as root, use <code>sudo</code>, or follow the instructions at Linux injection without root).</li> <li>Connect your Switch in RCM to your PC using the USB cable.</li> <li>Wait for your Switch to be shown as found in the injector.</li> <li>Press <code>Select Payload</code>, and navigate to and select your payload <code>.bin</code> file.<ul> <li>The first time you read this page you should inject TegraExplorer.bin.</li> </ul> </li> <li>Click <code>Send Payload!</code> to launch the payload you selected.</li> </ol>"},{"location":"user_guide/rcm/sending_payload/#android","title":"Android","text":""},{"location":"user_guide/rcm/sending_payload/#what-you-need_2","title":"What you need","text":"<ul> <li>The latest release of Rekado<ul> <li>You will need to enable Unknown Sources in your device settings to install this</li> </ul> </li> <li>A USB-C cable<ul> <li>If your device has a USB-C port, you may use a C-C cable</li> <li>If your device only has a Micro USB port, you will need a USB OTG adapter and a USB A-C cable<ul> <li>This will not work on every phone!</li> </ul> </li> </ul> </li> </ul> <p>Payloads you'll need for this guide:</p> <ul> <li>The latest release of Hekate. The Hekate payload (hekate_ctcaer bin) is located in the hekate_ctcaer zip.</li> <li>The latest release of TegraExplorer</li> </ul>"},{"location":"user_guide/rcm/sending_payload/#instructions_2","title":"Instructions","text":"<ol> <li>Copy the hekate_ctcaer <code>.bin</code> file from the Hekate <code>.zip</code> file to a location on your phone.<ul> <li>A tool such as Amaze File Manager can do this.</li> </ul> </li> <li>Launch Rekado on your phone.</li> <li>Navigate to <code>Payloads</code>, then press the <code>+</code> button at the bottom right.</li> <li>Navigate to your hekate_ctcaer <code>.bin</code> file and tap it to add it to Rekado's menu.</li> <li>Optional, but recommended: Navigate to Rekado's settings and enable <code>Hide bundled</code>.</li> <li>Connect your Switch in RCM to your phone using the USB cable.</li> <li>If prompted, grant Rekado access to the Switch.</li> <li>Select your payload <code>.bin</code> file in the dialog that pops up.<ul> <li>The first time you read this page you should inject TegraExplorer.bin.</li> </ul> </li> </ol>"},{"location":"user_guide/rcm/sending_payload/#chromebook","title":"Chromebook","text":""},{"location":"user_guide/rcm/sending_payload/#what-you-need_3","title":"What you need","text":"<ul> <li>A USB-C cable</li> <li>If your chromebook has a USB-C port, do note that this will not work using a C-C cable.</li> </ul> <p>Payloads you'll need for this guide:</p> <ul> <li>The latest release of Hekate. The Hekate payload (hekate_ctcaer bin) is located in the hekate_ctcaer zip.</li> <li>The latest release of TegraExplorer</li> </ul>"},{"location":"user_guide/rcm/sending_payload/#instructions_3","title":"Instructions","text":"<ol> <li>Go to the injection website and scroll all the way down</li> <li>Select the \"Upload Payload\" option and upload the hekate_ctcaer <code>.bin</code> file from the Hekate <code>.zip</code> file.<ul> <li>The first time you read this page you should inject TegraExplorer.bin.</li> </ul> </li> <li>Connect your Switch in RCM to your Chromebook using the USB cable.</li> <li>Select \"Do the thing\". A pop up will appear. Click the <code>APX</code> option.</li> <li>Press the Connect button and the payload will be injected.</li> </ol> <p>If nothing happens after you send the payload</p> <p>If your console's screen remains black after you've sent TegraExplorer (or any other payload), it's possible your payload was corrupted, or that your console is patched. If your payload injector program shows that 0 bytes were sent, then it is definitely patched, so you'll be unable to proceed with the rest of the guide.</p> <p> </p> <p>Continue to Partitioning the SD </p>"}]}